/* automatically generated by rust-bindgen 0.65.1 */

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(dead_code)]

pub const FMOD_VERSION: u32 = 279652;
pub const FMOD_CAPS_NONE: u32 = 0;
pub const FMOD_CAPS_HARDWARE: u32 = 1;
pub const FMOD_CAPS_HARDWARE_EMULATED: u32 = 2;
pub const FMOD_CAPS_OUTPUT_MULTICHANNEL: u32 = 4;
pub const FMOD_CAPS_OUTPUT_FORMAT_PCM8: u32 = 8;
pub const FMOD_CAPS_OUTPUT_FORMAT_PCM16: u32 = 16;
pub const FMOD_CAPS_OUTPUT_FORMAT_PCM24: u32 = 32;
pub const FMOD_CAPS_OUTPUT_FORMAT_PCM32: u32 = 64;
pub const FMOD_CAPS_OUTPUT_FORMAT_PCMFLOAT: u32 = 128;
pub const FMOD_CAPS_REVERB_LIMITED: u32 = 8192;
pub const FMOD_CAPS_LOOPBACK: u32 = 16384;
pub const FMOD_DEBUG_LEVEL_NONE: u32 = 0;
pub const FMOD_DEBUG_LEVEL_LOG: u32 = 1;
pub const FMOD_DEBUG_LEVEL_ERROR: u32 = 2;
pub const FMOD_DEBUG_LEVEL_WARNING: u32 = 4;
pub const FMOD_DEBUG_LEVEL_HINT: u32 = 8;
pub const FMOD_DEBUG_LEVEL_ALL: u32 = 255;
pub const FMOD_DEBUG_TYPE_MEMORY: u32 = 256;
pub const FMOD_DEBUG_TYPE_THREAD: u32 = 512;
pub const FMOD_DEBUG_TYPE_FILE: u32 = 1024;
pub const FMOD_DEBUG_TYPE_NET: u32 = 2048;
pub const FMOD_DEBUG_TYPE_EVENT: u32 = 4096;
pub const FMOD_DEBUG_TYPE_ALL: u32 = 65535;
pub const FMOD_DEBUG_DISPLAY_TIMESTAMPS: u32 = 16777216;
pub const FMOD_DEBUG_DISPLAY_LINENUMBERS: u32 = 33554432;
pub const FMOD_DEBUG_DISPLAY_COMPRESS: u32 = 67108864;
pub const FMOD_DEBUG_DISPLAY_THREAD: u32 = 134217728;
pub const FMOD_DEBUG_DISPLAY_ALL: u32 = 251658240;
pub const FMOD_DEBUG_ALL: u32 = 4294967295;
pub const FMOD_MEMORY_NORMAL: u32 = 0;
pub const FMOD_MEMORY_STREAM_FILE: u32 = 1;
pub const FMOD_MEMORY_STREAM_DECODE: u32 = 2;
pub const FMOD_MEMORY_SAMPLEDATA: u32 = 4;
pub const FMOD_MEMORY_DSP_OUTPUTBUFFER: u32 = 8;
pub const FMOD_MEMORY_XBOX360_PHYSICAL: u32 = 1048576;
pub const FMOD_MEMORY_PERSISTENT: u32 = 2097152;
pub const FMOD_MEMORY_SECONDARY: u32 = 4194304;
pub const FMOD_MEMORY_ALL: u32 = 4294967295;
pub const FMOD_INIT_NORMAL: u32 = 0;
pub const FMOD_INIT_STREAM_FROM_UPDATE: u32 = 1;
pub const FMOD_INIT_3D_RIGHTHANDED: u32 = 2;
pub const FMOD_INIT_SOFTWARE_DISABLE: u32 = 4;
pub const FMOD_INIT_OCCLUSION_LOWPASS: u32 = 8;
pub const FMOD_INIT_HRTF_LOWPASS: u32 = 16;
pub const FMOD_INIT_DISTANCE_FILTERING: u32 = 512;
pub const FMOD_INIT_REVERB_PREALLOCBUFFERS: u32 = 64;
pub const FMOD_INIT_ENABLE_PROFILE: u32 = 32;
pub const FMOD_INIT_VOL0_BECOMES_VIRTUAL: u32 = 128;
pub const FMOD_INIT_WASAPI_EXCLUSIVE: u32 = 256;
pub const FMOD_INIT_PS3_PREFERDTS: u32 = 8388608;
pub const FMOD_INIT_PS3_FORCE2CHLPCM: u32 = 16777216;
pub const FMOD_INIT_DISABLEDOLBY: u32 = 1048576;
pub const FMOD_INIT_SYSTEM_MUSICMUTENOTPAUSE: u32 = 2097152;
pub const FMOD_INIT_SYNCMIXERWITHUPDATE: u32 = 4194304;
pub const FMOD_INIT_GEOMETRY_USECLOSEST: u32 = 67108864;
pub const FMOD_INIT_DISABLE_MYEARS_AUTODETECT: u32 = 134217728;
pub const FMOD_INIT_PS3_DISABLEDTS: u32 = 268435456;
pub const FMOD_INIT_PS3_DISABLEDOLBYDIGITAL: u32 = 536870912;
pub const FMOD_INIT_7POINT1_DOLBYMAPPING: u32 = 1073741824;
pub const FMOD_INIT_ASYNCREAD_FAST: u32 = 2147483648;
pub const FMOD_DEFAULT: u32 = 0;
pub const FMOD_LOOP_OFF: u32 = 1;
pub const FMOD_LOOP_NORMAL: u32 = 2;
pub const FMOD_LOOP_BIDI: u32 = 4;
pub const FMOD_2D: u32 = 8;
pub const FMOD_3D: u32 = 16;
pub const FMOD_HARDWARE: u32 = 32;
pub const FMOD_SOFTWARE: u32 = 64;
pub const FMOD_CREATESTREAM: u32 = 128;
pub const FMOD_CREATESAMPLE: u32 = 256;
pub const FMOD_CREATECOMPRESSEDSAMPLE: u32 = 512;
pub const FMOD_OPENUSER: u32 = 1024;
pub const FMOD_OPENMEMORY: u32 = 2048;
pub const FMOD_OPENMEMORY_POINT: u32 = 268435456;
pub const FMOD_OPENRAW: u32 = 4096;
pub const FMOD_OPENONLY: u32 = 8192;
pub const FMOD_ACCURATETIME: u32 = 16384;
pub const FMOD_MPEGSEARCH: u32 = 32768;
pub const FMOD_NONBLOCKING: u32 = 65536;
pub const FMOD_UNIQUE: u32 = 131072;
pub const FMOD_3D_HEADRELATIVE: u32 = 262144;
pub const FMOD_3D_WORLDRELATIVE: u32 = 524288;
pub const FMOD_3D_INVERSEROLLOFF: u32 = 1048576;
pub const FMOD_3D_LINEARROLLOFF: u32 = 2097152;
pub const FMOD_3D_LINEARSQUAREROLLOFF: u32 = 4194304;
pub const FMOD_3D_CUSTOMROLLOFF: u32 = 67108864;
pub const FMOD_3D_IGNOREGEOMETRY: u32 = 1073741824;
pub const FMOD_UNICODE: u32 = 16777216;
pub const FMOD_IGNORETAGS: u32 = 33554432;
pub const FMOD_LOWMEM: u32 = 134217728;
pub const FMOD_LOADSECONDARYRAM: u32 = 536870912;
pub const FMOD_VIRTUAL_PLAYFROMSTART: u32 = 2147483648;
pub const FMOD_TIMEUNIT_MS: u32 = 1;
pub const FMOD_TIMEUNIT_PCM: u32 = 2;
pub const FMOD_TIMEUNIT_PCMBYTES: u32 = 4;
pub const FMOD_TIMEUNIT_RAWBYTES: u32 = 8;
pub const FMOD_TIMEUNIT_PCMFRACTION: u32 = 16;
pub const FMOD_TIMEUNIT_MODORDER: u32 = 256;
pub const FMOD_TIMEUNIT_MODROW: u32 = 512;
pub const FMOD_TIMEUNIT_MODPATTERN: u32 = 1024;
pub const FMOD_TIMEUNIT_SENTENCE_MS: u32 = 65536;
pub const FMOD_TIMEUNIT_SENTENCE_PCM: u32 = 131072;
pub const FMOD_TIMEUNIT_SENTENCE_PCMBYTES: u32 = 262144;
pub const FMOD_TIMEUNIT_SENTENCE: u32 = 524288;
pub const FMOD_TIMEUNIT_SENTENCE_SUBSOUND: u32 = 1048576;
pub const FMOD_TIMEUNIT_BUFFERED: u32 = 268435456;
pub const FMOD_REVERB_FLAGS_HIGHQUALITYREVERB: u32 = 1024;
pub const FMOD_REVERB_FLAGS_HIGHQUALITYDPL2REVERB: u32 = 2048;
pub const FMOD_REVERB_FLAGS_HARDWAREONLY: u32 = 4096;
pub const FMOD_REVERB_FLAGS_DEFAULT: u32 = 0;
pub const FMOD_REVERB_CHANNELFLAGS_INSTANCE0: u32 = 16;
pub const FMOD_REVERB_CHANNELFLAGS_INSTANCE1: u32 = 32;
pub const FMOD_REVERB_CHANNELFLAGS_INSTANCE2: u32 = 64;
pub const FMOD_REVERB_CHANNELFLAGS_INSTANCE3: u32 = 128;
pub const FMOD_REVERB_CHANNELFLAGS_DEFAULT: u32 = 16;
pub const FMOD_MEMBITS_OTHER: u32 = 1;
pub const FMOD_MEMBITS_STRING: u32 = 2;
pub const FMOD_MEMBITS_SYSTEM: u32 = 4;
pub const FMOD_MEMBITS_PLUGINS: u32 = 8;
pub const FMOD_MEMBITS_OUTPUT: u32 = 16;
pub const FMOD_MEMBITS_CHANNEL: u32 = 32;
pub const FMOD_MEMBITS_CHANNELGROUP: u32 = 64;
pub const FMOD_MEMBITS_CODEC: u32 = 128;
pub const FMOD_MEMBITS_FILE: u32 = 256;
pub const FMOD_MEMBITS_SOUND: u32 = 512;
pub const FMOD_MEMBITS_SOUND_SECONDARYRAM: u32 = 1024;
pub const FMOD_MEMBITS_SOUNDGROUP: u32 = 2048;
pub const FMOD_MEMBITS_STREAMBUFFER: u32 = 4096;
pub const FMOD_MEMBITS_DSPCONNECTION: u32 = 8192;
pub const FMOD_MEMBITS_DSP: u32 = 16384;
pub const FMOD_MEMBITS_DSPCODEC: u32 = 32768;
pub const FMOD_MEMBITS_PROFILE: u32 = 65536;
pub const FMOD_MEMBITS_RECORDBUFFER: u32 = 131072;
pub const FMOD_MEMBITS_REVERB: u32 = 262144;
pub const FMOD_MEMBITS_REVERBCHANNELPROPS: u32 = 524288;
pub const FMOD_MEMBITS_GEOMETRY: u32 = 1048576;
pub const FMOD_MEMBITS_SYNCPOINT: u32 = 2097152;
pub const FMOD_MEMBITS_ALL: u32 = 4294967295;
pub const FMOD_EVENT_MEMBITS_EVENTSYSTEM: u32 = 1;
pub const FMOD_EVENT_MEMBITS_MUSICSYSTEM: u32 = 2;
pub const FMOD_EVENT_MEMBITS_FEV: u32 = 4;
pub const FMOD_EVENT_MEMBITS_MEMORYFSB: u32 = 8;
pub const FMOD_EVENT_MEMBITS_EVENTPROJECT: u32 = 16;
pub const FMOD_EVENT_MEMBITS_EVENTGROUPI: u32 = 32;
pub const FMOD_EVENT_MEMBITS_SOUNDBANKCLASS: u32 = 64;
pub const FMOD_EVENT_MEMBITS_SOUNDBANKLIST: u32 = 128;
pub const FMOD_EVENT_MEMBITS_STREAMINSTANCE: u32 = 256;
pub const FMOD_EVENT_MEMBITS_SOUNDDEFCLASS: u32 = 512;
pub const FMOD_EVENT_MEMBITS_SOUNDDEFDEFCLASS: u32 = 1024;
pub const FMOD_EVENT_MEMBITS_SOUNDDEFPOOL: u32 = 2048;
pub const FMOD_EVENT_MEMBITS_REVERBDEF: u32 = 4096;
pub const FMOD_EVENT_MEMBITS_EVENTREVERB: u32 = 8192;
pub const FMOD_EVENT_MEMBITS_USERPROPERTY: u32 = 16384;
pub const FMOD_EVENT_MEMBITS_EVENTINSTANCE: u32 = 32768;
pub const FMOD_EVENT_MEMBITS_EVENTINSTANCE_COMPLEX: u32 = 65536;
pub const FMOD_EVENT_MEMBITS_EVENTINSTANCE_SIMPLE: u32 = 131072;
pub const FMOD_EVENT_MEMBITS_EVENTINSTANCE_LAYER: u32 = 262144;
pub const FMOD_EVENT_MEMBITS_EVENTINSTANCE_SOUND: u32 = 524288;
pub const FMOD_EVENT_MEMBITS_EVENTENVELOPE: u32 = 1048576;
pub const FMOD_EVENT_MEMBITS_EVENTENVELOPEDEF: u32 = 2097152;
pub const FMOD_EVENT_MEMBITS_EVENTPARAMETER: u32 = 4194304;
pub const FMOD_EVENT_MEMBITS_EVENTCATEGORY: u32 = 8388608;
pub const FMOD_EVENT_MEMBITS_EVENTENVELOPEPOINT: u32 = 16777216;
pub const FMOD_EVENT_MEMBITS_EVENTINSTANCEPOOL: u32 = 33554432;
pub const FMOD_EVENT_MEMBITS_ALL: u32 = 4294967295;
pub const FMOD_EVENT_MEMBITS_EVENTINSTANCE_GROUP: u32 = 1015808;
pub const FMOD_EVENT_MEMBITS_SOUNDDEF_GROUP: u32 = 3584;
pub const FMOD_EVENT_VERSION: u32 = 279652;
pub const FMOD_EVENT_INIT_NORMAL: u32 = 0;
pub const FMOD_EVENT_INIT_USER_ASSETMANAGER: u32 = 1;
pub const FMOD_EVENT_INIT_FAIL_ON_MAXSTREAMS: u32 = 2;
pub const FMOD_EVENT_INIT_DONTUSENAMES: u32 = 4;
pub const FMOD_EVENT_INIT_UPPERCASE_FILENAMES: u32 = 8;
pub const FMOD_EVENT_INIT_LOWERCASE_FILENAMES: u32 = 128;
pub const FMOD_EVENT_INIT_SEARCH_PLUGINS: u32 = 16;
pub const FMOD_EVENT_INIT_USE_GUIDS: u32 = 32;
pub const FMOD_EVENT_INIT_DETAILED_SOUNDDEF_INFO: u32 = 64;
pub const FMOD_EVENT_INIT_RESETPARAMSTOMINIMUM: u32 = 256;
pub const FMOD_EVENT_INIT_ELEVATION_AFFECTS_LISTENER_ANGLE: u32 = 512;
pub const FMOD_EVENT_INIT_DONTUSELOWMEM: u32 = 1024;
pub const FMOD_EVENT_DEFAULT: u32 = 0;
pub const FMOD_EVENT_NONBLOCKING: u32 = 1;
pub const FMOD_EVENT_ERROR_ON_DISKACCESS: u32 = 2;
pub const FMOD_EVENT_INFOONLY: u32 = 4;
pub const FMOD_EVENT_USERDSP: u32 = 8;
pub const FMOD_EVENT_NONBLOCKING_THREAD0: u32 = 1;
pub const FMOD_EVENT_NONBLOCKING_THREAD1: u32 = 65537;
pub const FMOD_EVENT_NONBLOCKING_THREAD2: u32 = 131073;
pub const FMOD_EVENT_NONBLOCKING_THREAD3: u32 = 262145;
pub const FMOD_EVENT_NONBLOCKING_THREAD4: u32 = 524289;
pub const FMOD_EVENT_NONBLOCKING_THREAD_MAX: u32 = 5;
pub const FMOD_EVENT_STATE_READY: u32 = 1;
pub const FMOD_EVENT_STATE_LOADING: u32 = 2;
pub const FMOD_EVENT_STATE_ERROR: u32 = 4;
pub const FMOD_EVENT_STATE_PLAYING: u32 = 8;
pub const FMOD_EVENT_STATE_CHANNELSACTIVE: u32 = 16;
pub const FMOD_EVENT_STATE_INFOONLY: u32 = 32;
pub const FMOD_EVENT_STATE_STARVING: u32 = 64;
pub const FMOD_EVENT_STATE_NEEDSTOLOAD: u32 = 128;
pub type FMOD_BOOL = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_SYSTEM {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_SOUND {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CHANNEL {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CHANNELGROUP {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_SOUNDGROUP {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_REVERB {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSPCONNECTION {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_POLYGON {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_GEOMETRY {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_SYNCPOINT {
    _unused: [u8; 0],
}
pub type FMOD_MODE = ::std::os::raw::c_uint;
pub type FMOD_TIMEUNIT = ::std::os::raw::c_uint;
pub type FMOD_INITFLAGS = ::std::os::raw::c_uint;
pub type FMOD_CAPS = ::std::os::raw::c_uint;
pub type FMOD_DEBUGLEVEL = ::std::os::raw::c_uint;
pub type FMOD_MEMORY_TYPE = ::std::os::raw::c_uint;
pub const FMOD_RESULT_FMOD_OK: FMOD_RESULT = 0;
pub const FMOD_RESULT_FMOD_ERR_ALREADYLOCKED: FMOD_RESULT = 1;
pub const FMOD_RESULT_FMOD_ERR_BADCOMMAND: FMOD_RESULT = 2;
pub const FMOD_RESULT_FMOD_ERR_CDDA_DRIVERS: FMOD_RESULT = 3;
pub const FMOD_RESULT_FMOD_ERR_CDDA_INIT: FMOD_RESULT = 4;
pub const FMOD_RESULT_FMOD_ERR_CDDA_INVALID_DEVICE: FMOD_RESULT = 5;
pub const FMOD_RESULT_FMOD_ERR_CDDA_NOAUDIO: FMOD_RESULT = 6;
pub const FMOD_RESULT_FMOD_ERR_CDDA_NODEVICES: FMOD_RESULT = 7;
pub const FMOD_RESULT_FMOD_ERR_CDDA_NODISC: FMOD_RESULT = 8;
pub const FMOD_RESULT_FMOD_ERR_CDDA_READ: FMOD_RESULT = 9;
pub const FMOD_RESULT_FMOD_ERR_CHANNEL_ALLOC: FMOD_RESULT = 10;
pub const FMOD_RESULT_FMOD_ERR_CHANNEL_STOLEN: FMOD_RESULT = 11;
pub const FMOD_RESULT_FMOD_ERR_COM: FMOD_RESULT = 12;
pub const FMOD_RESULT_FMOD_ERR_DMA: FMOD_RESULT = 13;
pub const FMOD_RESULT_FMOD_ERR_DSP_CONNECTION: FMOD_RESULT = 14;
pub const FMOD_RESULT_FMOD_ERR_DSP_FORMAT: FMOD_RESULT = 15;
pub const FMOD_RESULT_FMOD_ERR_DSP_NOTFOUND: FMOD_RESULT = 16;
pub const FMOD_RESULT_FMOD_ERR_DSP_RUNNING: FMOD_RESULT = 17;
pub const FMOD_RESULT_FMOD_ERR_DSP_TOOMANYCONNECTIONS: FMOD_RESULT = 18;
pub const FMOD_RESULT_FMOD_ERR_FILE_BAD: FMOD_RESULT = 19;
pub const FMOD_RESULT_FMOD_ERR_FILE_COULDNOTSEEK: FMOD_RESULT = 20;
pub const FMOD_RESULT_FMOD_ERR_FILE_DISKEJECTED: FMOD_RESULT = 21;
pub const FMOD_RESULT_FMOD_ERR_FILE_EOF: FMOD_RESULT = 22;
pub const FMOD_RESULT_FMOD_ERR_FILE_NOTFOUND: FMOD_RESULT = 23;
pub const FMOD_RESULT_FMOD_ERR_FILE_UNWANTED: FMOD_RESULT = 24;
pub const FMOD_RESULT_FMOD_ERR_FORMAT: FMOD_RESULT = 25;
pub const FMOD_RESULT_FMOD_ERR_HTTP: FMOD_RESULT = 26;
pub const FMOD_RESULT_FMOD_ERR_HTTP_ACCESS: FMOD_RESULT = 27;
pub const FMOD_RESULT_FMOD_ERR_HTTP_PROXY_AUTH: FMOD_RESULT = 28;
pub const FMOD_RESULT_FMOD_ERR_HTTP_SERVER_ERROR: FMOD_RESULT = 29;
pub const FMOD_RESULT_FMOD_ERR_HTTP_TIMEOUT: FMOD_RESULT = 30;
pub const FMOD_RESULT_FMOD_ERR_INITIALIZATION: FMOD_RESULT = 31;
pub const FMOD_RESULT_FMOD_ERR_INITIALIZED: FMOD_RESULT = 32;
pub const FMOD_RESULT_FMOD_ERR_INTERNAL: FMOD_RESULT = 33;
pub const FMOD_RESULT_FMOD_ERR_INVALID_ADDRESS: FMOD_RESULT = 34;
pub const FMOD_RESULT_FMOD_ERR_INVALID_FLOAT: FMOD_RESULT = 35;
pub const FMOD_RESULT_FMOD_ERR_INVALID_HANDLE: FMOD_RESULT = 36;
pub const FMOD_RESULT_FMOD_ERR_INVALID_PARAM: FMOD_RESULT = 37;
pub const FMOD_RESULT_FMOD_ERR_INVALID_POSITION: FMOD_RESULT = 38;
pub const FMOD_RESULT_FMOD_ERR_INVALID_SPEAKER: FMOD_RESULT = 39;
pub const FMOD_RESULT_FMOD_ERR_INVALID_SYNCPOINT: FMOD_RESULT = 40;
pub const FMOD_RESULT_FMOD_ERR_INVALID_VECTOR: FMOD_RESULT = 41;
pub const FMOD_RESULT_FMOD_ERR_MAXAUDIBLE: FMOD_RESULT = 42;
pub const FMOD_RESULT_FMOD_ERR_MEMORY: FMOD_RESULT = 43;
pub const FMOD_RESULT_FMOD_ERR_MEMORY_CANTPOINT: FMOD_RESULT = 44;
pub const FMOD_RESULT_FMOD_ERR_MEMORY_SRAM: FMOD_RESULT = 45;
pub const FMOD_RESULT_FMOD_ERR_NEEDS2D: FMOD_RESULT = 46;
pub const FMOD_RESULT_FMOD_ERR_NEEDS3D: FMOD_RESULT = 47;
pub const FMOD_RESULT_FMOD_ERR_NEEDSHARDWARE: FMOD_RESULT = 48;
pub const FMOD_RESULT_FMOD_ERR_NEEDSSOFTWARE: FMOD_RESULT = 49;
pub const FMOD_RESULT_FMOD_ERR_NET_CONNECT: FMOD_RESULT = 50;
pub const FMOD_RESULT_FMOD_ERR_NET_SOCKET_ERROR: FMOD_RESULT = 51;
pub const FMOD_RESULT_FMOD_ERR_NET_URL: FMOD_RESULT = 52;
pub const FMOD_RESULT_FMOD_ERR_NET_WOULD_BLOCK: FMOD_RESULT = 53;
pub const FMOD_RESULT_FMOD_ERR_NOTREADY: FMOD_RESULT = 54;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_ALLOCATED: FMOD_RESULT = 55;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_CREATEBUFFER: FMOD_RESULT = 56;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_DRIVERCALL: FMOD_RESULT = 57;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_ENUMERATION: FMOD_RESULT = 58;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_FORMAT: FMOD_RESULT = 59;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_INIT: FMOD_RESULT = 60;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_NOHARDWARE: FMOD_RESULT = 61;
pub const FMOD_RESULT_FMOD_ERR_OUTPUT_NOSOFTWARE: FMOD_RESULT = 62;
pub const FMOD_RESULT_FMOD_ERR_PAN: FMOD_RESULT = 63;
pub const FMOD_RESULT_FMOD_ERR_PLUGIN: FMOD_RESULT = 64;
pub const FMOD_RESULT_FMOD_ERR_PLUGIN_INSTANCES: FMOD_RESULT = 65;
pub const FMOD_RESULT_FMOD_ERR_PLUGIN_MISSING: FMOD_RESULT = 66;
pub const FMOD_RESULT_FMOD_ERR_PLUGIN_RESOURCE: FMOD_RESULT = 67;
pub const FMOD_RESULT_FMOD_ERR_PRELOADED: FMOD_RESULT = 68;
pub const FMOD_RESULT_FMOD_ERR_PROGRAMMERSOUND: FMOD_RESULT = 69;
pub const FMOD_RESULT_FMOD_ERR_RECORD: FMOD_RESULT = 70;
pub const FMOD_RESULT_FMOD_ERR_REVERB_INSTANCE: FMOD_RESULT = 71;
pub const FMOD_RESULT_FMOD_ERR_SUBSOUND_ALLOCATED: FMOD_RESULT = 72;
pub const FMOD_RESULT_FMOD_ERR_SUBSOUND_CANTMOVE: FMOD_RESULT = 73;
pub const FMOD_RESULT_FMOD_ERR_SUBSOUND_MODE: FMOD_RESULT = 74;
pub const FMOD_RESULT_FMOD_ERR_SUBSOUNDS: FMOD_RESULT = 75;
pub const FMOD_RESULT_FMOD_ERR_TAGNOTFOUND: FMOD_RESULT = 76;
pub const FMOD_RESULT_FMOD_ERR_TOOMANYCHANNELS: FMOD_RESULT = 77;
pub const FMOD_RESULT_FMOD_ERR_UNIMPLEMENTED: FMOD_RESULT = 78;
pub const FMOD_RESULT_FMOD_ERR_UNINITIALIZED: FMOD_RESULT = 79;
pub const FMOD_RESULT_FMOD_ERR_UNSUPPORTED: FMOD_RESULT = 80;
pub const FMOD_RESULT_FMOD_ERR_UPDATE: FMOD_RESULT = 81;
pub const FMOD_RESULT_FMOD_ERR_VERSION: FMOD_RESULT = 82;
pub const FMOD_RESULT_FMOD_ERR_EVENT_FAILED: FMOD_RESULT = 83;
pub const FMOD_RESULT_FMOD_ERR_EVENT_INFOONLY: FMOD_RESULT = 84;
pub const FMOD_RESULT_FMOD_ERR_EVENT_INTERNAL: FMOD_RESULT = 85;
pub const FMOD_RESULT_FMOD_ERR_EVENT_MAXSTREAMS: FMOD_RESULT = 86;
pub const FMOD_RESULT_FMOD_ERR_EVENT_MISMATCH: FMOD_RESULT = 87;
pub const FMOD_RESULT_FMOD_ERR_EVENT_NAMECONFLICT: FMOD_RESULT = 88;
pub const FMOD_RESULT_FMOD_ERR_EVENT_NOTFOUND: FMOD_RESULT = 89;
pub const FMOD_RESULT_FMOD_ERR_EVENT_NEEDSSIMPLE: FMOD_RESULT = 90;
pub const FMOD_RESULT_FMOD_ERR_EVENT_GUIDCONFLICT: FMOD_RESULT = 91;
pub const FMOD_RESULT_FMOD_ERR_EVENT_ALREADY_LOADED: FMOD_RESULT = 92;
pub const FMOD_RESULT_FMOD_ERR_MUSIC_UNINITIALIZED: FMOD_RESULT = 93;
pub const FMOD_RESULT_FMOD_ERR_MUSIC_NOTFOUND: FMOD_RESULT = 94;
pub const FMOD_RESULT_FMOD_ERR_MUSIC_NOCALLBACK: FMOD_RESULT = 95;
pub const FMOD_RESULT_FMOD_RESULT_FORCEINT: FMOD_RESULT = 65536;
pub type FMOD_RESULT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_VECTOR {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_FMOD_VECTOR() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_VECTOR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_VECTOR>(),
        12usize,
        concat!("Size of: ", stringify!(FMOD_VECTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_VECTOR>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_VECTOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_VECTOR),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_VECTOR),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_VECTOR),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct FMOD_GUID {
    pub Data1: ::std::os::raw::c_uint,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}

#[test]
fn bindgen_test_layout_FMOD_GUID() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_GUID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_GUID>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_GUID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_GUID),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_GUID),
            "::",
            stringify!(Data2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_GUID),
            "::",
            stringify!(Data3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_GUID),
            "::",
            stringify!(Data4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_ASYNCREADINFO {
    pub handle: *mut ::std::os::raw::c_void,
    pub offset: ::std::os::raw::c_uint,
    pub sizebytes: ::std::os::raw::c_uint,
    pub priority: ::std::os::raw::c_int,
    pub buffer: *mut ::std::os::raw::c_void,
    pub bytesread: ::std::os::raw::c_uint,
    pub result: FMOD_RESULT,
    pub userdata: *mut ::std::os::raw::c_void,
    pub done: ::std::option::Option<
        unsafe extern "C" fn(info: *mut FMOD_ASYNCREADINFO, result: FMOD_RESULT),
    >,
}
#[test]
fn bindgen_test_layout_FMOD_ASYNCREADINFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_ASYNCREADINFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_ASYNCREADINFO>(),
        56usize,
        concat!("Size of: ", stringify!(FMOD_ASYNCREADINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_ASYNCREADINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_ASYNCREADINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizebytes) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(sizebytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesread) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).done) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(done)
        )
    );
}
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_AUTODETECT: FMOD_OUTPUTTYPE = 0;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_UNKNOWN: FMOD_OUTPUTTYPE = 1;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_NOSOUND: FMOD_OUTPUTTYPE = 2;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_WAVWRITER: FMOD_OUTPUTTYPE = 3;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_NOSOUND_NRT: FMOD_OUTPUTTYPE = 4;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_WAVWRITER_NRT: FMOD_OUTPUTTYPE = 5;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_DSOUND: FMOD_OUTPUTTYPE = 6;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_WINMM: FMOD_OUTPUTTYPE = 7;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_WASAPI: FMOD_OUTPUTTYPE = 8;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_ASIO: FMOD_OUTPUTTYPE = 9;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_OSS: FMOD_OUTPUTTYPE = 10;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_ALSA: FMOD_OUTPUTTYPE = 11;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_ESD: FMOD_OUTPUTTYPE = 12;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_PULSEAUDIO: FMOD_OUTPUTTYPE = 13;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_COREAUDIO: FMOD_OUTPUTTYPE = 14;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_XBOX360: FMOD_OUTPUTTYPE = 15;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_PSP: FMOD_OUTPUTTYPE = 16;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_PS3: FMOD_OUTPUTTYPE = 17;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_NGP: FMOD_OUTPUTTYPE = 18;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_WII: FMOD_OUTPUTTYPE = 19;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_3DS: FMOD_OUTPUTTYPE = 20;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_AUDIOTRACK: FMOD_OUTPUTTYPE = 21;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_OPENSL: FMOD_OUTPUTTYPE = 22;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_NACL: FMOD_OUTPUTTYPE = 23;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_WIIU: FMOD_OUTPUTTYPE = 24;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_ASOUND: FMOD_OUTPUTTYPE = 25;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_AUDIOOUT: FMOD_OUTPUTTYPE = 26;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_XAUDIO: FMOD_OUTPUTTYPE = 27;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_MAX: FMOD_OUTPUTTYPE = 28;
pub const FMOD_OUTPUTTYPE_FMOD_OUTPUTTYPE_FORCEINT: FMOD_OUTPUTTYPE = 65536;
pub type FMOD_OUTPUTTYPE = ::std::os::raw::c_uint;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_RAW: FMOD_SPEAKERMODE = 0;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_MONO: FMOD_SPEAKERMODE = 1;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_STEREO: FMOD_SPEAKERMODE = 2;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_QUAD: FMOD_SPEAKERMODE = 3;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_SURROUND: FMOD_SPEAKERMODE = 4;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_5POINT1: FMOD_SPEAKERMODE = 5;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_7POINT1: FMOD_SPEAKERMODE = 6;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_SRS5_1_MATRIX: FMOD_SPEAKERMODE = 7;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_DOLBY5_1_MATRIX: FMOD_SPEAKERMODE = 8;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_MYEARS: FMOD_SPEAKERMODE = 9;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_MAX: FMOD_SPEAKERMODE = 10;
pub const FMOD_SPEAKERMODE_FMOD_SPEAKERMODE_FORCEINT: FMOD_SPEAKERMODE = 65536;
pub type FMOD_SPEAKERMODE = ::std::os::raw::c_uint;
pub const FMOD_SPEAKER_FMOD_SPEAKER_FRONT_LEFT: FMOD_SPEAKER = 0;
pub const FMOD_SPEAKER_FMOD_SPEAKER_FRONT_RIGHT: FMOD_SPEAKER = 1;
pub const FMOD_SPEAKER_FMOD_SPEAKER_FRONT_CENTER: FMOD_SPEAKER = 2;
pub const FMOD_SPEAKER_FMOD_SPEAKER_LOW_FREQUENCY: FMOD_SPEAKER = 3;
pub const FMOD_SPEAKER_FMOD_SPEAKER_BACK_LEFT: FMOD_SPEAKER = 4;
pub const FMOD_SPEAKER_FMOD_SPEAKER_BACK_RIGHT: FMOD_SPEAKER = 5;
pub const FMOD_SPEAKER_FMOD_SPEAKER_SIDE_LEFT: FMOD_SPEAKER = 6;
pub const FMOD_SPEAKER_FMOD_SPEAKER_SIDE_RIGHT: FMOD_SPEAKER = 7;
pub const FMOD_SPEAKER_FMOD_SPEAKER_MAX: FMOD_SPEAKER = 8;
pub const FMOD_SPEAKER_FMOD_SPEAKER_MONO: FMOD_SPEAKER = 0;
pub const FMOD_SPEAKER_FMOD_SPEAKER_NULL: FMOD_SPEAKER = 65535;
pub const FMOD_SPEAKER_FMOD_SPEAKER_SBL: FMOD_SPEAKER = 6;
pub const FMOD_SPEAKER_FMOD_SPEAKER_SBR: FMOD_SPEAKER = 7;
pub const FMOD_SPEAKER_FMOD_SPEAKER_FORCEINT: FMOD_SPEAKER = 65536;
pub type FMOD_SPEAKER = ::std::os::raw::c_uint;
pub const FMOD_PLUGINTYPE_FMOD_PLUGINTYPE_OUTPUT: FMOD_PLUGINTYPE = 0;
pub const FMOD_PLUGINTYPE_FMOD_PLUGINTYPE_CODEC: FMOD_PLUGINTYPE = 1;
pub const FMOD_PLUGINTYPE_FMOD_PLUGINTYPE_DSP: FMOD_PLUGINTYPE = 2;
pub const FMOD_PLUGINTYPE_FMOD_PLUGINTYPE_MAX: FMOD_PLUGINTYPE = 3;
pub const FMOD_PLUGINTYPE_FMOD_PLUGINTYPE_FORCEINT: FMOD_PLUGINTYPE = 65536;
pub type FMOD_PLUGINTYPE = ::std::os::raw::c_uint;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_UNKNOWN: FMOD_SOUND_TYPE = 0;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_AIFF: FMOD_SOUND_TYPE = 1;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_ASF: FMOD_SOUND_TYPE = 2;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_AT3: FMOD_SOUND_TYPE = 3;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_CDDA: FMOD_SOUND_TYPE = 4;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_DLS: FMOD_SOUND_TYPE = 5;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_FLAC: FMOD_SOUND_TYPE = 6;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_FSB: FMOD_SOUND_TYPE = 7;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_GCADPCM: FMOD_SOUND_TYPE = 8;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_IT: FMOD_SOUND_TYPE = 9;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_MIDI: FMOD_SOUND_TYPE = 10;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_MOD: FMOD_SOUND_TYPE = 11;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_MPEG: FMOD_SOUND_TYPE = 12;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_OGGVORBIS: FMOD_SOUND_TYPE = 13;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_PLAYLIST: FMOD_SOUND_TYPE = 14;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_RAW: FMOD_SOUND_TYPE = 15;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_S3M: FMOD_SOUND_TYPE = 16;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_SF2: FMOD_SOUND_TYPE = 17;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_USER: FMOD_SOUND_TYPE = 18;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_WAV: FMOD_SOUND_TYPE = 19;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_XM: FMOD_SOUND_TYPE = 20;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_XMA: FMOD_SOUND_TYPE = 21;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_VAG: FMOD_SOUND_TYPE = 22;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_AUDIOQUEUE: FMOD_SOUND_TYPE = 23;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_XWMA: FMOD_SOUND_TYPE = 24;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_BCWAV: FMOD_SOUND_TYPE = 25;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_AT9: FMOD_SOUND_TYPE = 26;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_VORBIS: FMOD_SOUND_TYPE = 27;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_MEDIA_FOUNDATION: FMOD_SOUND_TYPE = 28;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_MAX: FMOD_SOUND_TYPE = 29;
pub const FMOD_SOUND_TYPE_FMOD_SOUND_TYPE_FORCEINT: FMOD_SOUND_TYPE = 65536;
pub type FMOD_SOUND_TYPE = ::std::os::raw::c_uint;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_NONE: FMOD_SOUND_FORMAT = 0;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_PCM8: FMOD_SOUND_FORMAT = 1;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_PCM16: FMOD_SOUND_FORMAT = 2;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_PCM24: FMOD_SOUND_FORMAT = 3;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_PCM32: FMOD_SOUND_FORMAT = 4;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_PCMFLOAT: FMOD_SOUND_FORMAT = 5;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_GCADPCM: FMOD_SOUND_FORMAT = 6;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_IMAADPCM: FMOD_SOUND_FORMAT = 7;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_VAG: FMOD_SOUND_FORMAT = 8;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_HEVAG: FMOD_SOUND_FORMAT = 9;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_XMA: FMOD_SOUND_FORMAT = 10;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_MPEG: FMOD_SOUND_FORMAT = 11;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_CELT: FMOD_SOUND_FORMAT = 12;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_AT9: FMOD_SOUND_FORMAT = 13;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_XWMA: FMOD_SOUND_FORMAT = 14;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_VORBIS: FMOD_SOUND_FORMAT = 15;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_MAX: FMOD_SOUND_FORMAT = 16;
pub const FMOD_SOUND_FORMAT_FMOD_SOUND_FORMAT_FORCEINT: FMOD_SOUND_FORMAT = 65536;
pub type FMOD_SOUND_FORMAT = ::std::os::raw::c_uint;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_READY: FMOD_OPENSTATE = 0;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_LOADING: FMOD_OPENSTATE = 1;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_ERROR: FMOD_OPENSTATE = 2;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_CONNECTING: FMOD_OPENSTATE = 3;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_BUFFERING: FMOD_OPENSTATE = 4;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_SEEKING: FMOD_OPENSTATE = 5;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_PLAYING: FMOD_OPENSTATE = 6;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_SETPOSITION: FMOD_OPENSTATE = 7;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_MAX: FMOD_OPENSTATE = 8;
pub const FMOD_OPENSTATE_FMOD_OPENSTATE_FORCEINT: FMOD_OPENSTATE = 65536;
pub type FMOD_OPENSTATE = ::std::os::raw::c_uint;
pub const FMOD_SOUNDGROUP_BEHAVIOR_FMOD_SOUNDGROUP_BEHAVIOR_FAIL: FMOD_SOUNDGROUP_BEHAVIOR = 0;
pub const FMOD_SOUNDGROUP_BEHAVIOR_FMOD_SOUNDGROUP_BEHAVIOR_MUTE: FMOD_SOUNDGROUP_BEHAVIOR = 1;
pub const FMOD_SOUNDGROUP_BEHAVIOR_FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST: FMOD_SOUNDGROUP_BEHAVIOR =
    2;
pub const FMOD_SOUNDGROUP_BEHAVIOR_FMOD_SOUNDGROUP_BEHAVIOR_MAX: FMOD_SOUNDGROUP_BEHAVIOR = 3;
pub const FMOD_SOUNDGROUP_BEHAVIOR_FMOD_SOUNDGROUP_BEHAVIOR_FORCEINT: FMOD_SOUNDGROUP_BEHAVIOR =
    65536;
pub type FMOD_SOUNDGROUP_BEHAVIOR = ::std::os::raw::c_uint;
pub const FMOD_CHANNEL_CALLBACKTYPE_FMOD_CHANNEL_CALLBACKTYPE_END: FMOD_CHANNEL_CALLBACKTYPE = 0;
pub const FMOD_CHANNEL_CALLBACKTYPE_FMOD_CHANNEL_CALLBACKTYPE_VIRTUALVOICE:
    FMOD_CHANNEL_CALLBACKTYPE = 1;
pub const FMOD_CHANNEL_CALLBACKTYPE_FMOD_CHANNEL_CALLBACKTYPE_SYNCPOINT: FMOD_CHANNEL_CALLBACKTYPE =
    2;
pub const FMOD_CHANNEL_CALLBACKTYPE_FMOD_CHANNEL_CALLBACKTYPE_OCCLUSION: FMOD_CHANNEL_CALLBACKTYPE =
    3;
pub const FMOD_CHANNEL_CALLBACKTYPE_FMOD_CHANNEL_CALLBACKTYPE_MAX: FMOD_CHANNEL_CALLBACKTYPE = 4;
pub const FMOD_CHANNEL_CALLBACKTYPE_FMOD_CHANNEL_CALLBACKTYPE_FORCEINT: FMOD_CHANNEL_CALLBACKTYPE =
    65536;
pub type FMOD_CHANNEL_CALLBACKTYPE = ::std::os::raw::c_uint;
pub const FMOD_SYSTEM_CALLBACKTYPE_FMOD_SYSTEM_CALLBACKTYPE_DEVICELISTCHANGED:
    FMOD_SYSTEM_CALLBACKTYPE = 0;
pub const FMOD_SYSTEM_CALLBACKTYPE_FMOD_SYSTEM_CALLBACKTYPE_DEVICELOST: FMOD_SYSTEM_CALLBACKTYPE =
    1;
pub const FMOD_SYSTEM_CALLBACKTYPE_FMOD_SYSTEM_CALLBACKTYPE_MEMORYALLOCATIONFAILED:
    FMOD_SYSTEM_CALLBACKTYPE = 2;
pub const FMOD_SYSTEM_CALLBACKTYPE_FMOD_SYSTEM_CALLBACKTYPE_THREADCREATED:
    FMOD_SYSTEM_CALLBACKTYPE = 3;
pub const FMOD_SYSTEM_CALLBACKTYPE_FMOD_SYSTEM_CALLBACKTYPE_BADDSPCONNECTION:
    FMOD_SYSTEM_CALLBACKTYPE = 4;
pub const FMOD_SYSTEM_CALLBACKTYPE_FMOD_SYSTEM_CALLBACKTYPE_BADDSPLEVEL: FMOD_SYSTEM_CALLBACKTYPE =
    5;
pub const FMOD_SYSTEM_CALLBACKTYPE_FMOD_SYSTEM_CALLBACKTYPE_THREADDESTROYED:
    FMOD_SYSTEM_CALLBACKTYPE = 6;
pub const FMOD_SYSTEM_CALLBACKTYPE_FMOD_SYSTEM_CALLBACKTYPE_MAX: FMOD_SYSTEM_CALLBACKTYPE = 7;
pub const FMOD_SYSTEM_CALLBACKTYPE_FMOD_SYSTEM_CALLBACKTYPE_FORCEINT: FMOD_SYSTEM_CALLBACKTYPE =
    65536;
pub type FMOD_SYSTEM_CALLBACKTYPE = ::std::os::raw::c_uint;
pub type FMOD_SYSTEM_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        system: *mut FMOD_SYSTEM,
        type_: FMOD_SYSTEM_CALLBACKTYPE,
        commanddata1: *mut ::std::os::raw::c_void,
        commanddata2: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CHANNEL_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        channel: *mut FMOD_CHANNEL,
        type_: FMOD_CHANNEL_CALLBACKTYPE,
        commanddata1: *mut ::std::os::raw::c_void,
        commanddata2: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_SOUND_NONBLOCKCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(sound: *mut FMOD_SOUND, result: FMOD_RESULT) -> FMOD_RESULT,
>;
pub type FMOD_SOUND_PCMREADCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        sound: *mut FMOD_SOUND,
        data: *mut ::std::os::raw::c_void,
        datalen: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_SOUND_PCMSETPOSCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        sound: *mut FMOD_SOUND,
        subsound: ::std::os::raw::c_int,
        position: ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_OPENCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        unicode: ::std::os::raw::c_int,
        filesize: *mut ::std::os::raw::c_uint,
        handle: *mut *mut ::std::os::raw::c_void,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_CLOSECALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_READCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_void,
        sizebytes: ::std::os::raw::c_uint,
        bytesread: *mut ::std::os::raw::c_uint,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_SEEKCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        pos: ::std::os::raw::c_uint,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_ASYNCREADCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut FMOD_ASYNCREADINFO,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_ASYNCCANCELCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_MEMORY_ALLOCCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        size: ::std::os::raw::c_uint,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_MEMORY_REALLOCCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_MEMORY_FREECALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ),
>;
pub type FMOD_3D_ROLLOFFCALLBACK =
    ::std::option::Option<unsafe extern "C" fn(channel: *mut FMOD_CHANNEL, distance: f32) -> f32>;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_RECT: FMOD_DSP_FFT_WINDOW = 0;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_TRIANGLE: FMOD_DSP_FFT_WINDOW = 1;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_HAMMING: FMOD_DSP_FFT_WINDOW = 2;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_HANNING: FMOD_DSP_FFT_WINDOW = 3;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_BLACKMAN: FMOD_DSP_FFT_WINDOW = 4;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS: FMOD_DSP_FFT_WINDOW = 5;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_MAX: FMOD_DSP_FFT_WINDOW = 6;
pub const FMOD_DSP_FFT_WINDOW_FMOD_DSP_FFT_WINDOW_FORCEINT: FMOD_DSP_FFT_WINDOW = 65536;
pub type FMOD_DSP_FFT_WINDOW = ::std::os::raw::c_uint;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_NOINTERP: FMOD_DSP_RESAMPLER = 0;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_LINEAR: FMOD_DSP_RESAMPLER = 1;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_CUBIC: FMOD_DSP_RESAMPLER = 2;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_SPLINE: FMOD_DSP_RESAMPLER = 3;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_MAX: FMOD_DSP_RESAMPLER = 4;
pub const FMOD_DSP_RESAMPLER_FMOD_DSP_RESAMPLER_FORCEINT: FMOD_DSP_RESAMPLER = 65536;
pub type FMOD_DSP_RESAMPLER = ::std::os::raw::c_uint;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_UNKNOWN: FMOD_TAGTYPE = 0;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_ID3V1: FMOD_TAGTYPE = 1;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_ID3V2: FMOD_TAGTYPE = 2;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_VORBISCOMMENT: FMOD_TAGTYPE = 3;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_SHOUTCAST: FMOD_TAGTYPE = 4;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_ICECAST: FMOD_TAGTYPE = 5;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_ASF: FMOD_TAGTYPE = 6;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_MIDI: FMOD_TAGTYPE = 7;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_PLAYLIST: FMOD_TAGTYPE = 8;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_FMOD: FMOD_TAGTYPE = 9;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_USER: FMOD_TAGTYPE = 10;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_MAX: FMOD_TAGTYPE = 11;
pub const FMOD_TAGTYPE_FMOD_TAGTYPE_FORCEINT: FMOD_TAGTYPE = 65536;
pub type FMOD_TAGTYPE = ::std::os::raw::c_uint;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_BINARY: FMOD_TAGDATATYPE = 0;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_INT: FMOD_TAGDATATYPE = 1;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_FLOAT: FMOD_TAGDATATYPE = 2;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_STRING: FMOD_TAGDATATYPE = 3;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_STRING_UTF16: FMOD_TAGDATATYPE = 4;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_STRING_UTF16BE: FMOD_TAGDATATYPE = 5;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_STRING_UTF8: FMOD_TAGDATATYPE = 6;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_CDTOC: FMOD_TAGDATATYPE = 7;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_MAX: FMOD_TAGDATATYPE = 8;
pub const FMOD_TAGDATATYPE_FMOD_TAGDATATYPE_FORCEINT: FMOD_TAGDATATYPE = 65536;
pub type FMOD_TAGDATATYPE = ::std::os::raw::c_uint;
pub const FMOD_DELAYTYPE_FMOD_DELAYTYPE_END_MS: FMOD_DELAYTYPE = 0;
pub const FMOD_DELAYTYPE_FMOD_DELAYTYPE_DSPCLOCK_START: FMOD_DELAYTYPE = 1;
pub const FMOD_DELAYTYPE_FMOD_DELAYTYPE_DSPCLOCK_END: FMOD_DELAYTYPE = 2;
pub const FMOD_DELAYTYPE_FMOD_DELAYTYPE_DSPCLOCK_PAUSE: FMOD_DELAYTYPE = 3;
pub const FMOD_DELAYTYPE_FMOD_DELAYTYPE_MAX: FMOD_DELAYTYPE = 4;
pub const FMOD_DELAYTYPE_FMOD_DELAYTYPE_FORCEINT: FMOD_DELAYTYPE = 65536;
pub type FMOD_DELAYTYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_TAG {
    pub type_: FMOD_TAGTYPE,
    pub datatype: FMOD_TAGDATATYPE,
    pub name: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub datalen: ::std::os::raw::c_uint,
    pub updated: FMOD_BOOL,
}
#[test]
fn bindgen_test_layout_FMOD_TAG() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_TAG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_TAG>(),
        32usize,
        concat!("Size of: ", stringify!(FMOD_TAG))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_TAG>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_TAG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datatype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(datatype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datalen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(datalen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).updated) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(updated)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CDTOC {
    pub numtracks: ::std::os::raw::c_int,
    pub min: [::std::os::raw::c_int; 100usize],
    pub sec: [::std::os::raw::c_int; 100usize],
    pub frame: [::std::os::raw::c_int; 100usize],
}
#[test]
fn bindgen_test_layout_FMOD_CDTOC() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_CDTOC> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_CDTOC>(),
        1204usize,
        concat!("Size of: ", stringify!(FMOD_CDTOC))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CDTOC>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_CDTOC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numtracks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CDTOC),
            "::",
            stringify!(numtracks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CDTOC),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CDTOC),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize },
        804usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CDTOC),
            "::",
            stringify!(frame)
        )
    );
}
pub const FMOD_SPEAKERMAPTYPE_FMOD_SPEAKERMAPTYPE_DEFAULT: FMOD_SPEAKERMAPTYPE = 0;
pub const FMOD_SPEAKERMAPTYPE_FMOD_SPEAKERMAPTYPE_ALLMONO: FMOD_SPEAKERMAPTYPE = 1;
pub const FMOD_SPEAKERMAPTYPE_FMOD_SPEAKERMAPTYPE_ALLSTEREO: FMOD_SPEAKERMAPTYPE = 2;
pub const FMOD_SPEAKERMAPTYPE_FMOD_SPEAKERMAPTYPE_51_PROTOOLS: FMOD_SPEAKERMAPTYPE = 3;
pub type FMOD_SPEAKERMAPTYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CREATESOUNDEXINFO {
    pub cbsize: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_uint,
    pub fileoffset: ::std::os::raw::c_uint,
    pub numchannels: ::std::os::raw::c_int,
    pub defaultfrequency: ::std::os::raw::c_int,
    pub format: FMOD_SOUND_FORMAT,
    pub decodebuffersize: ::std::os::raw::c_uint,
    pub initialsubsound: ::std::os::raw::c_int,
    pub numsubsounds: ::std::os::raw::c_int,
    pub inclusionlist: *mut ::std::os::raw::c_int,
    pub inclusionlistnum: ::std::os::raw::c_int,
    pub pcmreadcallback: FMOD_SOUND_PCMREADCALLBACK,
    pub pcmsetposcallback: FMOD_SOUND_PCMSETPOSCALLBACK,
    pub nonblockcallback: FMOD_SOUND_NONBLOCKCALLBACK,
    pub dlsname: *const ::std::os::raw::c_char,
    pub encryptionkey: *const ::std::os::raw::c_char,
    pub maxpolyphony: ::std::os::raw::c_int,
    pub userdata: *mut ::std::os::raw::c_void,
    pub suggestedsoundtype: FMOD_SOUND_TYPE,
    pub useropen: FMOD_FILE_OPENCALLBACK,
    pub userclose: FMOD_FILE_CLOSECALLBACK,
    pub userread: FMOD_FILE_READCALLBACK,
    pub userseek: FMOD_FILE_SEEKCALLBACK,
    pub userasyncread: FMOD_FILE_ASYNCREADCALLBACK,
    pub userasynccancel: FMOD_FILE_ASYNCCANCELCALLBACK,
    pub speakermap: FMOD_SPEAKERMAPTYPE,
    pub initialsoundgroup: *mut FMOD_SOUNDGROUP,
    pub initialseekposition: ::std::os::raw::c_uint,
    pub initialseekpostype: FMOD_TIMEUNIT,
    pub ignoresetfilesystem: ::std::os::raw::c_int,
    pub cddaforceaspi: ::std::os::raw::c_int,
    pub audioqueuepolicy: ::std::os::raw::c_uint,
    pub minmidigranularity: ::std::os::raw::c_uint,
    pub nonblockthreadid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_CREATESOUNDEXINFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_CREATESOUNDEXINFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_CREATESOUNDEXINFO>(),
        216usize,
        concat!("Size of: ", stringify!(FMOD_CREATESOUNDEXINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CREATESOUNDEXINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_CREATESOUNDEXINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(cbsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileoffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileoffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numchannels) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(numchannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultfrequency) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(defaultfrequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodebuffersize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(decodebuffersize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialsubsound) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(initialsubsound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsubsounds) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(numsubsounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inclusionlist) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(inclusionlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inclusionlistnum) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(inclusionlistnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcmreadcallback) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(pcmreadcallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcmsetposcallback) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(pcmsetposcallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nonblockcallback) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(nonblockcallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlsname) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(dlsname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encryptionkey) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(encryptionkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxpolyphony) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(maxpolyphony)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggestedsoundtype) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(suggestedsoundtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useropen) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(useropen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userclose) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(userclose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userread) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(userread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userseek) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(userseek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userasyncread) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(userasyncread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userasynccancel) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(userasynccancel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speakermap) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(speakermap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialsoundgroup) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(initialsoundgroup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialseekposition) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(initialseekposition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialseekpostype) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(initialseekpostype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignoresetfilesystem) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(ignoresetfilesystem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cddaforceaspi) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(cddaforceaspi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audioqueuepolicy) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(audioqueuepolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minmidigranularity) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(minmidigranularity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nonblockthreadid) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(nonblockthreadid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_REVERB_PROPERTIES {
    pub Instance: ::std::os::raw::c_int,
    pub Environment: ::std::os::raw::c_int,
    pub EnvDiffusion: f32,
    pub Room: ::std::os::raw::c_int,
    pub RoomHF: ::std::os::raw::c_int,
    pub RoomLF: ::std::os::raw::c_int,
    pub DecayTime: f32,
    pub DecayHFRatio: f32,
    pub DecayLFRatio: f32,
    pub Reflections: ::std::os::raw::c_int,
    pub ReflectionsDelay: f32,
    pub Reverb: ::std::os::raw::c_int,
    pub ReverbDelay: f32,
    pub ModulationTime: f32,
    pub ModulationDepth: f32,
    pub HFReference: f32,
    pub LFReference: f32,
    pub Diffusion: f32,
    pub Density: f32,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FMOD_REVERB_PROPERTIES() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_REVERB_PROPERTIES> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_REVERB_PROPERTIES>(),
        80usize,
        concat!("Size of: ", stringify!(FMOD_REVERB_PROPERTIES))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_REVERB_PROPERTIES>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_REVERB_PROPERTIES))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Environment) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(Environment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EnvDiffusion) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(EnvDiffusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Room) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(Room)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RoomHF) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(RoomHF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RoomLF) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(RoomLF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DecayTime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(DecayTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DecayHFRatio) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(DecayHFRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DecayLFRatio) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(DecayLFRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reflections) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(Reflections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReflectionsDelay) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(ReflectionsDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reverb) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(Reverb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReverbDelay) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(ReverbDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ModulationTime) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(ModulationTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ModulationDepth) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(ModulationDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HFReference) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(HFReference)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LFReference) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(LFReference)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Diffusion) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(Diffusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Density) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(Density)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(Flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_REVERB_CHANNELPROPERTIES {
    pub Direct: ::std::os::raw::c_int,
    pub Room: ::std::os::raw::c_int,
    pub Flags: ::std::os::raw::c_uint,
    pub ConnectionPoint: *mut FMOD_DSP,
}
#[test]
fn bindgen_test_layout_FMOD_REVERB_CHANNELPROPERTIES() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_REVERB_CHANNELPROPERTIES> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_REVERB_CHANNELPROPERTIES>(),
        24usize,
        concat!("Size of: ", stringify!(FMOD_REVERB_CHANNELPROPERTIES))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_REVERB_CHANNELPROPERTIES>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_REVERB_CHANNELPROPERTIES))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Direct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_CHANNELPROPERTIES),
            "::",
            stringify!(Direct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Room) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_CHANNELPROPERTIES),
            "::",
            stringify!(Room)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_CHANNELPROPERTIES),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnectionPoint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_CHANNELPROPERTIES),
            "::",
            stringify!(ConnectionPoint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_ADVANCEDSETTINGS {
    pub cbsize: ::std::os::raw::c_int,
    pub maxMPEGcodecs: ::std::os::raw::c_int,
    pub maxADPCMcodecs: ::std::os::raw::c_int,
    pub maxXMAcodecs: ::std::os::raw::c_int,
    pub maxCELTcodecs: ::std::os::raw::c_int,
    pub maxVORBIScodecs: ::std::os::raw::c_int,
    pub maxAT9Codecs: ::std::os::raw::c_int,
    pub maxPCMcodecs: ::std::os::raw::c_int,
    pub ASIONumChannels: ::std::os::raw::c_int,
    pub ASIOChannelList: *mut *mut ::std::os::raw::c_char,
    pub ASIOSpeakerList: *mut FMOD_SPEAKER,
    pub max3DReverbDSPs: ::std::os::raw::c_int,
    pub HRTFMinAngle: f32,
    pub HRTFMaxAngle: f32,
    pub HRTFFreq: f32,
    pub vol0virtualvol: f32,
    pub eventqueuesize: ::std::os::raw::c_int,
    pub defaultDecodeBufferSize: ::std::os::raw::c_uint,
    pub debugLogFilename: *mut ::std::os::raw::c_char,
    pub profileport: ::std::os::raw::c_ushort,
    pub geometryMaxFadeTime: ::std::os::raw::c_uint,
    pub maxSpectrumWaveDataBuffers: ::std::os::raw::c_uint,
    pub musicSystemCacheDelay: ::std::os::raw::c_uint,
    pub distanceFilterCenterFreq: f32,
    pub stackSizeStream: ::std::os::raw::c_uint,
    pub stackSizeNonBlocking: ::std::os::raw::c_uint,
    pub stackSizeMixer: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FMOD_ADVANCEDSETTINGS() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_ADVANCEDSETTINGS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_ADVANCEDSETTINGS>(),
        128usize,
        concat!("Size of: ", stringify!(FMOD_ADVANCEDSETTINGS))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_ADVANCEDSETTINGS>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_ADVANCEDSETTINGS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(cbsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMPEGcodecs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxMPEGcodecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxADPCMcodecs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxADPCMcodecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxXMAcodecs) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxXMAcodecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxCELTcodecs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxCELTcodecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVORBIScodecs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxVORBIScodecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxAT9Codecs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxAT9Codecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPCMcodecs) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxPCMcodecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASIONumChannels) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(ASIONumChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASIOChannelList) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(ASIOChannelList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASIOSpeakerList) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(ASIOSpeakerList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max3DReverbDSPs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(max3DReverbDSPs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HRTFMinAngle) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(HRTFMinAngle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HRTFMaxAngle) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(HRTFMaxAngle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HRTFFreq) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(HRTFFreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vol0virtualvol) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(vol0virtualvol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventqueuesize) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(eventqueuesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultDecodeBufferSize) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(defaultDecodeBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debugLogFilename) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(debugLogFilename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profileport) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(profileport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryMaxFadeTime) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(geometryMaxFadeTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSpectrumWaveDataBuffers) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxSpectrumWaveDataBuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).musicSystemCacheDelay) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(musicSystemCacheDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distanceFilterCenterFreq) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(distanceFilterCenterFreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stackSizeStream) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(stackSizeStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stackSizeNonBlocking) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(stackSizeNonBlocking)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stackSizeMixer) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(stackSizeMixer)
        )
    );
}
pub const FMOD_CHANNELINDEX_FMOD_CHANNEL_FREE: FMOD_CHANNELINDEX = -1;
pub const FMOD_CHANNELINDEX_FMOD_CHANNEL_REUSE: FMOD_CHANNELINDEX = -2;
pub type FMOD_CHANNELINDEX = ::std::os::raw::c_int;
pub type FMOD_CODEC_OPENCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        usermode: FMOD_MODE,
        userexinfo: *mut FMOD_CREATESOUNDEXINFO,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_CLOSECALLBACK =
    ::std::option::Option<unsafe extern "C" fn(codec_state: *mut FMOD_CODEC_STATE) -> FMOD_RESULT>;
pub type FMOD_CODEC_READCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        buffer: *mut ::std::os::raw::c_void,
        sizebytes: ::std::os::raw::c_uint,
        bytesread: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_GETLENGTHCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        length: *mut ::std::os::raw::c_uint,
        lengthtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_SETPOSITIONCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        subsound: ::std::os::raw::c_int,
        position: ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_GETPOSITIONCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        position: *mut ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_SOUNDCREATECALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        subsound: ::std::os::raw::c_int,
        sound: *mut FMOD_SOUND,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_METADATACALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        tagtype: FMOD_TAGTYPE,
        name: *mut ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        datalen: ::std::os::raw::c_uint,
        datatype: FMOD_TAGDATATYPE,
        unique: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_GETWAVEFORMAT = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        index: ::std::os::raw::c_int,
        waveformat: *mut FMOD_CODEC_WAVEFORMAT,
    ) -> FMOD_RESULT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CODEC_DESCRIPTION {
    pub name: *const ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_uint,
    pub defaultasstream: ::std::os::raw::c_int,
    pub timeunits: FMOD_TIMEUNIT,
    pub open: FMOD_CODEC_OPENCALLBACK,
    pub close: FMOD_CODEC_CLOSECALLBACK,
    pub read: FMOD_CODEC_READCALLBACK,
    pub getlength: FMOD_CODEC_GETLENGTHCALLBACK,
    pub setposition: FMOD_CODEC_SETPOSITIONCALLBACK,
    pub getposition: FMOD_CODEC_GETPOSITIONCALLBACK,
    pub soundcreate: FMOD_CODEC_SOUNDCREATECALLBACK,
    pub getwaveformat: FMOD_CODEC_GETWAVEFORMAT,
}
#[test]
fn bindgen_test_layout_FMOD_CODEC_DESCRIPTION() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_CODEC_DESCRIPTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_CODEC_DESCRIPTION>(),
        88usize,
        concat!("Size of: ", stringify!(FMOD_CODEC_DESCRIPTION))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CODEC_DESCRIPTION>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_CODEC_DESCRIPTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultasstream) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(defaultasstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeunits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(timeunits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getlength) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(getlength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setposition) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(setposition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getposition) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(getposition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soundcreate) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(soundcreate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getwaveformat) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(getwaveformat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CODEC_WAVEFORMAT {
    pub name: [::std::os::raw::c_char; 256usize],
    pub format: FMOD_SOUND_FORMAT,
    pub channels: ::std::os::raw::c_int,
    pub frequency: ::std::os::raw::c_int,
    pub lengthbytes: ::std::os::raw::c_uint,
    pub lengthpcm: ::std::os::raw::c_uint,
    pub blockalign: ::std::os::raw::c_int,
    pub loopstart: ::std::os::raw::c_int,
    pub loopend: ::std::os::raw::c_int,
    pub mode: FMOD_MODE,
    pub channelmask: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FMOD_CODEC_WAVEFORMAT() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_CODEC_WAVEFORMAT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_CODEC_WAVEFORMAT>(),
        296usize,
        concat!("Size of: ", stringify!(FMOD_CODEC_WAVEFORMAT))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CODEC_WAVEFORMAT>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_CODEC_WAVEFORMAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequency) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(frequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengthbytes) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(lengthbytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengthpcm) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(lengthpcm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockalign) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(blockalign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopstart) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(loopstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopend) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(loopend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelmask) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(channelmask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CODEC_STATE {
    pub numsubsounds: ::std::os::raw::c_int,
    pub waveformat: *mut FMOD_CODEC_WAVEFORMAT,
    pub plugindata: *mut ::std::os::raw::c_void,
    pub filehandle: *mut ::std::os::raw::c_void,
    pub filesize: ::std::os::raw::c_uint,
    pub fileread: FMOD_FILE_READCALLBACK,
    pub fileseek: FMOD_FILE_SEEKCALLBACK,
    pub metadata: FMOD_CODEC_METADATACALLBACK,
}
#[test]
fn bindgen_test_layout_FMOD_CODEC_STATE() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_CODEC_STATE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_CODEC_STATE>(),
        64usize,
        concat!("Size of: ", stringify!(FMOD_CODEC_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CODEC_STATE>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_CODEC_STATE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsubsounds) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(numsubsounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveformat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(waveformat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugindata) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(plugindata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filehandle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(filehandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filesize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(filesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileread) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(fileread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileseek) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(fileseek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(metadata)
        )
    );
}
pub type FMOD_DSP_CREATECALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_RELEASECALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_RESETCALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_READCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        inbuffer: *mut f32,
        outbuffer: *mut f32,
        length: ::std::os::raw::c_uint,
        inchannels: ::std::os::raw::c_int,
        outchannels: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SETPOSITIONCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        pos: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SETPARAMCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: f32,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETPARAMCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: *mut f32,
        valuestr: *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_DIALOGCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        hwnd: *mut ::std::os::raw::c_void,
        show: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_UNKNOWN: FMOD_DSP_TYPE = 0;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_MIXER: FMOD_DSP_TYPE = 1;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_OSCILLATOR: FMOD_DSP_TYPE = 2;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_LOWPASS: FMOD_DSP_TYPE = 3;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_ITLOWPASS: FMOD_DSP_TYPE = 4;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_HIGHPASS: FMOD_DSP_TYPE = 5;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_ECHO: FMOD_DSP_TYPE = 6;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_FLANGE: FMOD_DSP_TYPE = 7;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_DISTORTION: FMOD_DSP_TYPE = 8;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_NORMALIZE: FMOD_DSP_TYPE = 9;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_PARAMEQ: FMOD_DSP_TYPE = 10;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_PITCHSHIFT: FMOD_DSP_TYPE = 11;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_CHORUS: FMOD_DSP_TYPE = 12;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_VSTPLUGIN: FMOD_DSP_TYPE = 13;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_WINAMPPLUGIN: FMOD_DSP_TYPE = 14;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_ITECHO: FMOD_DSP_TYPE = 15;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_COMPRESSOR: FMOD_DSP_TYPE = 16;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_SFXREVERB: FMOD_DSP_TYPE = 17;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_LOWPASS_SIMPLE: FMOD_DSP_TYPE = 18;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_DELAY: FMOD_DSP_TYPE = 19;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_TREMOLO: FMOD_DSP_TYPE = 20;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_LADSPAPLUGIN: FMOD_DSP_TYPE = 21;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_HIGHPASS_SIMPLE: FMOD_DSP_TYPE = 22;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_HARDWARE: FMOD_DSP_TYPE = 1000;
pub const FMOD_DSP_TYPE_FMOD_DSP_TYPE_FORCEINT: FMOD_DSP_TYPE = 65536;
pub type FMOD_DSP_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETERDESC {
    pub min: f32,
    pub max: f32,
    pub defaultval: f32,
    pub name: [::std::os::raw::c_char; 16usize],
    pub label: [::std::os::raw::c_char; 16usize],
    pub description: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETERDESC() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_PARAMETERDESC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETERDESC>(),
        56usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETERDESC))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETERDESC>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETERDESC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETERDESC),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETERDESC),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETERDESC),
            "::",
            stringify!(defaultval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETERDESC),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETERDESC),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETERDESC),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_DESCRIPTION {
    pub name: [::std::os::raw::c_char; 32usize],
    pub version: ::std::os::raw::c_uint,
    pub channels: ::std::os::raw::c_int,
    pub create: FMOD_DSP_CREATECALLBACK,
    pub release: FMOD_DSP_RELEASECALLBACK,
    pub reset: FMOD_DSP_RESETCALLBACK,
    pub read: FMOD_DSP_READCALLBACK,
    pub setposition: FMOD_DSP_SETPOSITIONCALLBACK,
    pub numparameters: ::std::os::raw::c_int,
    pub paramdesc: *mut FMOD_DSP_PARAMETERDESC,
    pub setparameter: FMOD_DSP_SETPARAMCALLBACK,
    pub getparameter: FMOD_DSP_GETPARAMCALLBACK,
    pub config: FMOD_DSP_DIALOGCALLBACK,
    pub configwidth: ::std::os::raw::c_int,
    pub configheight: ::std::os::raw::c_int,
    pub userdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_DESCRIPTION() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_DESCRIPTION> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_DESCRIPTION>(),
        136usize,
        concat!("Size of: ", stringify!(FMOD_DSP_DESCRIPTION))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_DESCRIPTION>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_DESCRIPTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setposition) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(setposition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numparameters) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(numparameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramdesc) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(paramdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setparameter) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(setparameter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getparameter) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(getparameter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configwidth) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(configwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configheight) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(configheight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(userdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_STATE {
    pub instance: *mut FMOD_DSP,
    pub plugindata: *mut ::std::os::raw::c_void,
    pub speakermask: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_STATE() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_DSP_STATE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_STATE>(),
        24usize,
        concat!("Size of: ", stringify!(FMOD_DSP_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_STATE>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_STATE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugindata) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(plugindata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speakermask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(speakermask)
        )
    );
}
pub const FMOD_DSP_OSCILLATOR_FMOD_DSP_OSCILLATOR_TYPE: FMOD_DSP_OSCILLATOR = 0;
pub const FMOD_DSP_OSCILLATOR_FMOD_DSP_OSCILLATOR_RATE: FMOD_DSP_OSCILLATOR = 1;
pub type FMOD_DSP_OSCILLATOR = ::std::os::raw::c_uint;
pub const FMOD_DSP_LOWPASS_FMOD_DSP_LOWPASS_CUTOFF: FMOD_DSP_LOWPASS = 0;
pub const FMOD_DSP_LOWPASS_FMOD_DSP_LOWPASS_RESONANCE: FMOD_DSP_LOWPASS = 1;
pub type FMOD_DSP_LOWPASS = ::std::os::raw::c_uint;
pub const FMOD_DSP_ITLOWPASS_FMOD_DSP_ITLOWPASS_CUTOFF: FMOD_DSP_ITLOWPASS = 0;
pub const FMOD_DSP_ITLOWPASS_FMOD_DSP_ITLOWPASS_RESONANCE: FMOD_DSP_ITLOWPASS = 1;
pub type FMOD_DSP_ITLOWPASS = ::std::os::raw::c_uint;
pub const FMOD_DSP_HIGHPASS_FMOD_DSP_HIGHPASS_CUTOFF: FMOD_DSP_HIGHPASS = 0;
pub const FMOD_DSP_HIGHPASS_FMOD_DSP_HIGHPASS_RESONANCE: FMOD_DSP_HIGHPASS = 1;
pub type FMOD_DSP_HIGHPASS = ::std::os::raw::c_uint;
pub const FMOD_DSP_ECHO_FMOD_DSP_ECHO_DELAY: FMOD_DSP_ECHO = 0;
pub const FMOD_DSP_ECHO_FMOD_DSP_ECHO_DECAYRATIO: FMOD_DSP_ECHO = 1;
pub const FMOD_DSP_ECHO_FMOD_DSP_ECHO_MAXCHANNELS: FMOD_DSP_ECHO = 2;
pub const FMOD_DSP_ECHO_FMOD_DSP_ECHO_DRYMIX: FMOD_DSP_ECHO = 3;
pub const FMOD_DSP_ECHO_FMOD_DSP_ECHO_WETMIX: FMOD_DSP_ECHO = 4;
pub type FMOD_DSP_ECHO = ::std::os::raw::c_uint;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH0: FMOD_DSP_DELAY = 0;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH1: FMOD_DSP_DELAY = 1;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH2: FMOD_DSP_DELAY = 2;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH3: FMOD_DSP_DELAY = 3;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH4: FMOD_DSP_DELAY = 4;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH5: FMOD_DSP_DELAY = 5;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH6: FMOD_DSP_DELAY = 6;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH7: FMOD_DSP_DELAY = 7;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH8: FMOD_DSP_DELAY = 8;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH9: FMOD_DSP_DELAY = 9;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH10: FMOD_DSP_DELAY = 10;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH11: FMOD_DSP_DELAY = 11;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH12: FMOD_DSP_DELAY = 12;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH13: FMOD_DSP_DELAY = 13;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH14: FMOD_DSP_DELAY = 14;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_CH15: FMOD_DSP_DELAY = 15;
pub const FMOD_DSP_DELAY_FMOD_DSP_DELAY_MAXDELAY: FMOD_DSP_DELAY = 16;
pub type FMOD_DSP_DELAY = ::std::os::raw::c_uint;
pub const FMOD_DSP_FLANGE_FMOD_DSP_FLANGE_DRYMIX: FMOD_DSP_FLANGE = 0;
pub const FMOD_DSP_FLANGE_FMOD_DSP_FLANGE_WETMIX: FMOD_DSP_FLANGE = 1;
pub const FMOD_DSP_FLANGE_FMOD_DSP_FLANGE_DEPTH: FMOD_DSP_FLANGE = 2;
pub const FMOD_DSP_FLANGE_FMOD_DSP_FLANGE_RATE: FMOD_DSP_FLANGE = 3;
pub type FMOD_DSP_FLANGE = ::std::os::raw::c_uint;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_FREQUENCY: FMOD_DSP_TREMOLO = 0;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_DEPTH: FMOD_DSP_TREMOLO = 1;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_SHAPE: FMOD_DSP_TREMOLO = 2;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_SKEW: FMOD_DSP_TREMOLO = 3;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_DUTY: FMOD_DSP_TREMOLO = 4;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_SQUARE: FMOD_DSP_TREMOLO = 5;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_PHASE: FMOD_DSP_TREMOLO = 6;
pub const FMOD_DSP_TREMOLO_FMOD_DSP_TREMOLO_SPREAD: FMOD_DSP_TREMOLO = 7;
pub type FMOD_DSP_TREMOLO = ::std::os::raw::c_uint;
pub const FMOD_DSP_DISTORTION_FMOD_DSP_DISTORTION_LEVEL: FMOD_DSP_DISTORTION = 0;
pub type FMOD_DSP_DISTORTION = ::std::os::raw::c_uint;
pub const FMOD_DSP_NORMALIZE_FMOD_DSP_NORMALIZE_FADETIME: FMOD_DSP_NORMALIZE = 0;
pub const FMOD_DSP_NORMALIZE_FMOD_DSP_NORMALIZE_THRESHHOLD: FMOD_DSP_NORMALIZE = 1;
pub const FMOD_DSP_NORMALIZE_FMOD_DSP_NORMALIZE_MAXAMP: FMOD_DSP_NORMALIZE = 2;
pub type FMOD_DSP_NORMALIZE = ::std::os::raw::c_uint;
pub const FMOD_DSP_PARAMEQ_FMOD_DSP_PARAMEQ_CENTER: FMOD_DSP_PARAMEQ = 0;
pub const FMOD_DSP_PARAMEQ_FMOD_DSP_PARAMEQ_BANDWIDTH: FMOD_DSP_PARAMEQ = 1;
pub const FMOD_DSP_PARAMEQ_FMOD_DSP_PARAMEQ_GAIN: FMOD_DSP_PARAMEQ = 2;
pub type FMOD_DSP_PARAMEQ = ::std::os::raw::c_uint;
pub const FMOD_DSP_PITCHSHIFT_FMOD_DSP_PITCHSHIFT_PITCH: FMOD_DSP_PITCHSHIFT = 0;
pub const FMOD_DSP_PITCHSHIFT_FMOD_DSP_PITCHSHIFT_FFTSIZE: FMOD_DSP_PITCHSHIFT = 1;
pub const FMOD_DSP_PITCHSHIFT_FMOD_DSP_PITCHSHIFT_OVERLAP: FMOD_DSP_PITCHSHIFT = 2;
pub const FMOD_DSP_PITCHSHIFT_FMOD_DSP_PITCHSHIFT_MAXCHANNELS: FMOD_DSP_PITCHSHIFT = 3;
pub type FMOD_DSP_PITCHSHIFT = ::std::os::raw::c_uint;
pub const FMOD_DSP_CHORUS_FMOD_DSP_CHORUS_DRYMIX: FMOD_DSP_CHORUS = 0;
pub const FMOD_DSP_CHORUS_FMOD_DSP_CHORUS_WETMIX1: FMOD_DSP_CHORUS = 1;
pub const FMOD_DSP_CHORUS_FMOD_DSP_CHORUS_WETMIX2: FMOD_DSP_CHORUS = 2;
pub const FMOD_DSP_CHORUS_FMOD_DSP_CHORUS_WETMIX3: FMOD_DSP_CHORUS = 3;
pub const FMOD_DSP_CHORUS_FMOD_DSP_CHORUS_DELAY: FMOD_DSP_CHORUS = 4;
pub const FMOD_DSP_CHORUS_FMOD_DSP_CHORUS_RATE: FMOD_DSP_CHORUS = 5;
pub const FMOD_DSP_CHORUS_FMOD_DSP_CHORUS_DEPTH: FMOD_DSP_CHORUS = 6;
pub type FMOD_DSP_CHORUS = ::std::os::raw::c_uint;
pub const FMOD_DSP_ITECHO_FMOD_DSP_ITECHO_WETDRYMIX: FMOD_DSP_ITECHO = 0;
pub const FMOD_DSP_ITECHO_FMOD_DSP_ITECHO_FEEDBACK: FMOD_DSP_ITECHO = 1;
pub const FMOD_DSP_ITECHO_FMOD_DSP_ITECHO_LEFTDELAY: FMOD_DSP_ITECHO = 2;
pub const FMOD_DSP_ITECHO_FMOD_DSP_ITECHO_RIGHTDELAY: FMOD_DSP_ITECHO = 3;
pub const FMOD_DSP_ITECHO_FMOD_DSP_ITECHO_PANDELAY: FMOD_DSP_ITECHO = 4;
pub type FMOD_DSP_ITECHO = ::std::os::raw::c_uint;
pub const FMOD_DSP_COMPRESSOR_FMOD_DSP_COMPRESSOR_THRESHOLD: FMOD_DSP_COMPRESSOR = 0;
pub const FMOD_DSP_COMPRESSOR_FMOD_DSP_COMPRESSOR_ATTACK: FMOD_DSP_COMPRESSOR = 1;
pub const FMOD_DSP_COMPRESSOR_FMOD_DSP_COMPRESSOR_RELEASE: FMOD_DSP_COMPRESSOR = 2;
pub const FMOD_DSP_COMPRESSOR_FMOD_DSP_COMPRESSOR_GAINMAKEUP: FMOD_DSP_COMPRESSOR = 3;
pub type FMOD_DSP_COMPRESSOR = ::std::os::raw::c_uint;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_DRYLEVEL: FMOD_DSP_SFXREVERB = 0;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_ROOM: FMOD_DSP_SFXREVERB = 1;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_ROOMHF: FMOD_DSP_SFXREVERB = 2;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_DECAYTIME: FMOD_DSP_SFXREVERB = 3;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_DECAYHFRATIO: FMOD_DSP_SFXREVERB = 4;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_REFLECTIONSLEVEL: FMOD_DSP_SFXREVERB = 5;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_REFLECTIONSDELAY: FMOD_DSP_SFXREVERB = 6;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_REVERBLEVEL: FMOD_DSP_SFXREVERB = 7;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_REVERBDELAY: FMOD_DSP_SFXREVERB = 8;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_DIFFUSION: FMOD_DSP_SFXREVERB = 9;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_DENSITY: FMOD_DSP_SFXREVERB = 10;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_HFREFERENCE: FMOD_DSP_SFXREVERB = 11;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_ROOMLF: FMOD_DSP_SFXREVERB = 12;
pub const FMOD_DSP_SFXREVERB_FMOD_DSP_SFXREVERB_LFREFERENCE: FMOD_DSP_SFXREVERB = 13;
pub type FMOD_DSP_SFXREVERB = ::std::os::raw::c_uint;
pub const FMOD_DSP_LOWPASS_SIMPLE_FMOD_DSP_LOWPASS_SIMPLE_CUTOFF: FMOD_DSP_LOWPASS_SIMPLE = 0;
pub type FMOD_DSP_LOWPASS_SIMPLE = ::std::os::raw::c_uint;
pub const FMOD_DSP_HIGHPASS_SIMPLE_FMOD_DSP_HIGHPASS_SIMPLE_CUTOFF: FMOD_DSP_HIGHPASS_SIMPLE = 0;
pub type FMOD_DSP_HIGHPASS_SIMPLE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_MEMORY_USAGE_DETAILS {
    pub other: ::std::os::raw::c_uint,
    pub string: ::std::os::raw::c_uint,
    pub system: ::std::os::raw::c_uint,
    pub plugins: ::std::os::raw::c_uint,
    pub output: ::std::os::raw::c_uint,
    pub channel: ::std::os::raw::c_uint,
    pub channelgroup: ::std::os::raw::c_uint,
    pub codec: ::std::os::raw::c_uint,
    pub file: ::std::os::raw::c_uint,
    pub sound: ::std::os::raw::c_uint,
    pub secondaryram: ::std::os::raw::c_uint,
    pub soundgroup: ::std::os::raw::c_uint,
    pub streambuffer: ::std::os::raw::c_uint,
    pub dspconnection: ::std::os::raw::c_uint,
    pub dsp: ::std::os::raw::c_uint,
    pub dspcodec: ::std::os::raw::c_uint,
    pub profile: ::std::os::raw::c_uint,
    pub recordbuffer: ::std::os::raw::c_uint,
    pub reverb: ::std::os::raw::c_uint,
    pub reverbchannelprops: ::std::os::raw::c_uint,
    pub geometry: ::std::os::raw::c_uint,
    pub syncpoint: ::std::os::raw::c_uint,
    pub eventsystem: ::std::os::raw::c_uint,
    pub musicsystem: ::std::os::raw::c_uint,
    pub fev: ::std::os::raw::c_uint,
    pub memoryfsb: ::std::os::raw::c_uint,
    pub eventproject: ::std::os::raw::c_uint,
    pub eventgroupi: ::std::os::raw::c_uint,
    pub soundbankclass: ::std::os::raw::c_uint,
    pub soundbanklist: ::std::os::raw::c_uint,
    pub streaminstance: ::std::os::raw::c_uint,
    pub sounddefclass: ::std::os::raw::c_uint,
    pub sounddefdefclass: ::std::os::raw::c_uint,
    pub sounddefpool: ::std::os::raw::c_uint,
    pub reverbdef: ::std::os::raw::c_uint,
    pub eventreverb: ::std::os::raw::c_uint,
    pub userproperty: ::std::os::raw::c_uint,
    pub eventinstance: ::std::os::raw::c_uint,
    pub eventinstance_complex: ::std::os::raw::c_uint,
    pub eventinstance_simple: ::std::os::raw::c_uint,
    pub eventinstance_layer: ::std::os::raw::c_uint,
    pub eventinstance_sound: ::std::os::raw::c_uint,
    pub eventenvelope: ::std::os::raw::c_uint,
    pub eventenvelopedef: ::std::os::raw::c_uint,
    pub eventparameter: ::std::os::raw::c_uint,
    pub eventcategory: ::std::os::raw::c_uint,
    pub eventenvelopepoint: ::std::os::raw::c_uint,
    pub eventinstancepool: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FMOD_MEMORY_USAGE_DETAILS() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_MEMORY_USAGE_DETAILS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_MEMORY_USAGE_DETAILS>(),
        192usize,
        concat!("Size of: ", stringify!(FMOD_MEMORY_USAGE_DETAILS))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_MEMORY_USAGE_DETAILS>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_MEMORY_USAGE_DETAILS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).other) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(other)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugins) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelgroup) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(channelgroup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codec) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(codec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sound) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(sound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secondaryram) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(secondaryram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soundgroup) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(soundgroup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streambuffer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(streambuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dspconnection) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(dspconnection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsp) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(dsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dspcodec) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(dspcodec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recordbuffer) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(recordbuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reverb) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(reverb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reverbchannelprops) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(reverbchannelprops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syncpoint) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(syncpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventsystem) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventsystem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).musicsystem) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(musicsystem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fev) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(fev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryfsb) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(memoryfsb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventproject) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventproject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventgroupi) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventgroupi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soundbankclass) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(soundbankclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soundbanklist) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(soundbanklist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streaminstance) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(streaminstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sounddefclass) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(sounddefclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sounddefdefclass) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(sounddefdefclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sounddefpool) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(sounddefpool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reverbdef) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(reverbdef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventreverb) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventreverb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userproperty) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(userproperty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventinstance) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventinstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventinstance_complex) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventinstance_complex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventinstance_simple) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventinstance_simple)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventinstance_layer) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventinstance_layer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventinstance_sound) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventinstance_sound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventenvelope) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventenvelope)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventenvelopedef) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventenvelopedef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventparameter) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventparameter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventcategory) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventcategory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventenvelopepoint) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventenvelopepoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventinstancepool) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MEMORY_USAGE_DETAILS),
            "::",
            stringify!(eventinstancepool)
        )
    );
}
extern "C" {
    pub fn FMOD_Memory_Initialize(
        poolmem: *mut ::std::os::raw::c_void,
        poollen: ::std::os::raw::c_int,
        useralloc: FMOD_MEMORY_ALLOCCALLBACK,
        userrealloc: FMOD_MEMORY_REALLOCCALLBACK,
        userfree: FMOD_MEMORY_FREECALLBACK,
        memtypeflags: FMOD_MEMORY_TYPE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Memory_GetStats(
        currentalloced: *mut ::std::os::raw::c_int,
        maxalloced: *mut ::std::os::raw::c_int,
        blocking: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Debug_SetLevel(level: FMOD_DEBUGLEVEL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Debug_GetLevel(level: *mut FMOD_DEBUGLEVEL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_File_SetDiskBusy(busy: ::std::os::raw::c_int) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_File_GetDiskBusy(busy: *mut ::std::os::raw::c_int) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Create(system: *mut *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Release(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetOutput(system: *mut FMOD_SYSTEM, output: FMOD_OUTPUTTYPE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetOutput(
        system: *mut FMOD_SYSTEM,
        output: *mut FMOD_OUTPUTTYPE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetNumDrivers(
        system: *mut FMOD_SYSTEM,
        numdrivers: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDriverInfo(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
        guid: *mut FMOD_GUID,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDriverInfoW(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_short,
        namelen: ::std::os::raw::c_int,
        guid: *mut FMOD_GUID,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDriverCaps(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        caps: *mut FMOD_CAPS,
        controlpaneloutputrate: *mut ::std::os::raw::c_int,
        controlpanelspeakermode: *mut FMOD_SPEAKERMODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetDriver(
        system: *mut FMOD_SYSTEM,
        driver: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDriver(
        system: *mut FMOD_SYSTEM,
        driver: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetHardwareChannels(
        system: *mut FMOD_SYSTEM,
        numhardwarechannels: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetSoftwareChannels(
        system: *mut FMOD_SYSTEM,
        numsoftwarechannels: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetSoftwareChannels(
        system: *mut FMOD_SYSTEM,
        numsoftwarechannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetSoftwareFormat(
        system: *mut FMOD_SYSTEM,
        samplerate: ::std::os::raw::c_int,
        format: FMOD_SOUND_FORMAT,
        numoutputchannels: ::std::os::raw::c_int,
        maxinputchannels: ::std::os::raw::c_int,
        resamplemethod: FMOD_DSP_RESAMPLER,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetSoftwareFormat(
        system: *mut FMOD_SYSTEM,
        samplerate: *mut ::std::os::raw::c_int,
        format: *mut FMOD_SOUND_FORMAT,
        numoutputchannels: *mut ::std::os::raw::c_int,
        maxinputchannels: *mut ::std::os::raw::c_int,
        resamplemethod: *mut FMOD_DSP_RESAMPLER,
        bits: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetDSPBufferSize(
        system: *mut FMOD_SYSTEM,
        bufferlength: ::std::os::raw::c_uint,
        numbuffers: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDSPBufferSize(
        system: *mut FMOD_SYSTEM,
        bufferlength: *mut ::std::os::raw::c_uint,
        numbuffers: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetFileSystem(
        system: *mut FMOD_SYSTEM,
        useropen: FMOD_FILE_OPENCALLBACK,
        userclose: FMOD_FILE_CLOSECALLBACK,
        userread: FMOD_FILE_READCALLBACK,
        userseek: FMOD_FILE_SEEKCALLBACK,
        userasyncread: FMOD_FILE_ASYNCREADCALLBACK,
        userasynccancel: FMOD_FILE_ASYNCCANCELCALLBACK,
        blockalign: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_AttachFileSystem(
        system: *mut FMOD_SYSTEM,
        useropen: FMOD_FILE_OPENCALLBACK,
        userclose: FMOD_FILE_CLOSECALLBACK,
        userread: FMOD_FILE_READCALLBACK,
        userseek: FMOD_FILE_SEEKCALLBACK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetAdvancedSettings(
        system: *mut FMOD_SYSTEM,
        settings: *mut FMOD_ADVANCEDSETTINGS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetAdvancedSettings(
        system: *mut FMOD_SYSTEM,
        settings: *mut FMOD_ADVANCEDSETTINGS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetSpeakerMode(
        system: *mut FMOD_SYSTEM,
        speakermode: FMOD_SPEAKERMODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetSpeakerMode(
        system: *mut FMOD_SYSTEM,
        speakermode: *mut FMOD_SPEAKERMODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetCallback(
        system: *mut FMOD_SYSTEM,
        callback: FMOD_SYSTEM_CALLBACK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetPluginPath(
        system: *mut FMOD_SYSTEM,
        path: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_LoadPlugin(
        system: *mut FMOD_SYSTEM,
        filename: *const ::std::os::raw::c_char,
        handle: *mut ::std::os::raw::c_uint,
        priority: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_UnloadPlugin(
        system: *mut FMOD_SYSTEM,
        handle: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetNumPlugins(
        system: *mut FMOD_SYSTEM,
        plugintype: FMOD_PLUGINTYPE,
        numplugins: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetPluginHandle(
        system: *mut FMOD_SYSTEM,
        plugintype: FMOD_PLUGINTYPE,
        index: ::std::os::raw::c_int,
        handle: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetPluginInfo(
        system: *mut FMOD_SYSTEM,
        handle: ::std::os::raw::c_uint,
        plugintype: *mut FMOD_PLUGINTYPE,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
        version: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetOutputByPlugin(
        system: *mut FMOD_SYSTEM,
        handle: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetOutputByPlugin(
        system: *mut FMOD_SYSTEM,
        handle: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateDSPByPlugin(
        system: *mut FMOD_SYSTEM,
        handle: ::std::os::raw::c_uint,
        dsp: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_RegisterCodec(
        system: *mut FMOD_SYSTEM,
        description: *mut FMOD_CODEC_DESCRIPTION,
        handle: *mut ::std::os::raw::c_uint,
        priority: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_RegisterDSP(
        system: *mut FMOD_SYSTEM,
        description: *mut FMOD_DSP_DESCRIPTION,
        handle: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Init(
        system: *mut FMOD_SYSTEM,
        maxchannels: ::std::os::raw::c_int,
        flags: FMOD_INITFLAGS,
        extradriverdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Close(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Update(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Set3DSettings(
        system: *mut FMOD_SYSTEM,
        dopplerscale: f32,
        distancefactor: f32,
        rolloffscale: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Get3DSettings(
        system: *mut FMOD_SYSTEM,
        dopplerscale: *mut f32,
        distancefactor: *mut f32,
        rolloffscale: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Set3DNumListeners(
        system: *mut FMOD_SYSTEM,
        numlisteners: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Get3DNumListeners(
        system: *mut FMOD_SYSTEM,
        numlisteners: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Set3DListenerAttributes(
        system: *mut FMOD_SYSTEM,
        listener: ::std::os::raw::c_int,
        pos: *const FMOD_VECTOR,
        vel: *const FMOD_VECTOR,
        forward: *const FMOD_VECTOR,
        up: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Get3DListenerAttributes(
        system: *mut FMOD_SYSTEM,
        listener: ::std::os::raw::c_int,
        pos: *mut FMOD_VECTOR,
        vel: *mut FMOD_VECTOR,
        forward: *mut FMOD_VECTOR,
        up: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Set3DRolloffCallback(
        system: *mut FMOD_SYSTEM,
        callback: FMOD_3D_ROLLOFFCALLBACK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Set3DSpeakerPosition(
        system: *mut FMOD_SYSTEM,
        speaker: FMOD_SPEAKER,
        x: f32,
        y: f32,
        active: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Get3DSpeakerPosition(
        system: *mut FMOD_SYSTEM,
        speaker: FMOD_SPEAKER,
        x: *mut f32,
        y: *mut f32,
        active: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetStreamBufferSize(
        system: *mut FMOD_SYSTEM,
        filebuffersize: ::std::os::raw::c_uint,
        filebuffersizetype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetStreamBufferSize(
        system: *mut FMOD_SYSTEM,
        filebuffersize: *mut ::std::os::raw::c_uint,
        filebuffersizetype: *mut FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetVersion(
        system: *mut FMOD_SYSTEM,
        version: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetOutputHandle(
        system: *mut FMOD_SYSTEM,
        handle: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetChannelsPlaying(
        system: *mut FMOD_SYSTEM,
        channels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetHardwareChannels(
        system: *mut FMOD_SYSTEM,
        numhardwarechannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetCPUUsage(
        system: *mut FMOD_SYSTEM,
        dsp: *mut f32,
        stream: *mut f32,
        geometry: *mut f32,
        update: *mut f32,
        total: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetSoundRAM(
        system: *mut FMOD_SYSTEM,
        currentalloced: *mut ::std::os::raw::c_int,
        maxalloced: *mut ::std::os::raw::c_int,
        total: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetNumCDROMDrives(
        system: *mut FMOD_SYSTEM,
        numdrives: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetCDROMDriveName(
        system: *mut FMOD_SYSTEM,
        drive: ::std::os::raw::c_int,
        drivename: *mut ::std::os::raw::c_char,
        drivenamelen: ::std::os::raw::c_int,
        scsiname: *mut ::std::os::raw::c_char,
        scsinamelen: ::std::os::raw::c_int,
        devicename: *mut ::std::os::raw::c_char,
        devicenamelen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetSpectrum(
        system: *mut FMOD_SYSTEM,
        spectrumarray: *mut f32,
        numvalues: ::std::os::raw::c_int,
        channeloffset: ::std::os::raw::c_int,
        windowtype: FMOD_DSP_FFT_WINDOW,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetWaveData(
        system: *mut FMOD_SYSTEM,
        wavearray: *mut f32,
        numvalues: ::std::os::raw::c_int,
        channeloffset: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateSound(
        system: *mut FMOD_SYSTEM,
        name_or_data: *const ::std::os::raw::c_char,
        mode: FMOD_MODE,
        exinfo: *mut FMOD_CREATESOUNDEXINFO,
        sound: *mut *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateStream(
        system: *mut FMOD_SYSTEM,
        name_or_data: *const ::std::os::raw::c_char,
        mode: FMOD_MODE,
        exinfo: *mut FMOD_CREATESOUNDEXINFO,
        sound: *mut *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateDSP(
        system: *mut FMOD_SYSTEM,
        description: *mut FMOD_DSP_DESCRIPTION,
        dsp: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateDSPByType(
        system: *mut FMOD_SYSTEM,
        type_: FMOD_DSP_TYPE,
        dsp: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateChannelGroup(
        system: *mut FMOD_SYSTEM,
        name: *const ::std::os::raw::c_char,
        channelgroup: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateSoundGroup(
        system: *mut FMOD_SYSTEM,
        name: *const ::std::os::raw::c_char,
        soundgroup: *mut *mut FMOD_SOUNDGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateReverb(
        system: *mut FMOD_SYSTEM,
        reverb: *mut *mut FMOD_REVERB,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_PlaySound(
        system: *mut FMOD_SYSTEM,
        channelid: FMOD_CHANNELINDEX,
        sound: *mut FMOD_SOUND,
        paused: FMOD_BOOL,
        channel: *mut *mut FMOD_CHANNEL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_PlayDSP(
        system: *mut FMOD_SYSTEM,
        channelid: FMOD_CHANNELINDEX,
        dsp: *mut FMOD_DSP,
        paused: FMOD_BOOL,
        channel: *mut *mut FMOD_CHANNEL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetChannel(
        system: *mut FMOD_SYSTEM,
        channelid: ::std::os::raw::c_int,
        channel: *mut *mut FMOD_CHANNEL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetMasterChannelGroup(
        system: *mut FMOD_SYSTEM,
        channelgroup: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetMasterSoundGroup(
        system: *mut FMOD_SYSTEM,
        soundgroup: *mut *mut FMOD_SOUNDGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetReverbProperties(
        system: *mut FMOD_SYSTEM,
        prop: *const FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetReverbProperties(
        system: *mut FMOD_SYSTEM,
        prop: *mut FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetReverbAmbientProperties(
        system: *mut FMOD_SYSTEM,
        prop: *mut FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetReverbAmbientProperties(
        system: *mut FMOD_SYSTEM,
        prop: *mut FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDSPHead(system: *mut FMOD_SYSTEM, dsp: *mut *mut FMOD_DSP)
        -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_AddDSP(
        system: *mut FMOD_SYSTEM,
        dsp: *mut FMOD_DSP,
        connection: *mut *mut FMOD_DSPCONNECTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_LockDSP(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_UnlockDSP(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDSPClock(
        system: *mut FMOD_SYSTEM,
        hi: *mut ::std::os::raw::c_uint,
        lo: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetRecordNumDrivers(
        system: *mut FMOD_SYSTEM,
        numdrivers: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetRecordDriverInfo(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
        guid: *mut FMOD_GUID,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetRecordDriverInfoW(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_short,
        namelen: ::std::os::raw::c_int,
        guid: *mut FMOD_GUID,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetRecordDriverCaps(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        caps: *mut FMOD_CAPS,
        minfrequency: *mut ::std::os::raw::c_int,
        maxfrequency: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetRecordPosition(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_RecordStart(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        sound: *mut FMOD_SOUND,
        loop_: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_RecordStop(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_IsRecording(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        recording: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateGeometry(
        system: *mut FMOD_SYSTEM,
        maxpolygons: ::std::os::raw::c_int,
        maxvertices: ::std::os::raw::c_int,
        geometry: *mut *mut FMOD_GEOMETRY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetGeometrySettings(
        system: *mut FMOD_SYSTEM,
        maxworldsize: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetGeometrySettings(
        system: *mut FMOD_SYSTEM,
        maxworldsize: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_LoadGeometry(
        system: *mut FMOD_SYSTEM,
        data: *const ::std::os::raw::c_void,
        datasize: ::std::os::raw::c_int,
        geometry: *mut *mut FMOD_GEOMETRY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetGeometryOcclusion(
        system: *mut FMOD_SYSTEM,
        listener: *const FMOD_VECTOR,
        source: *const FMOD_VECTOR,
        direct: *mut f32,
        reverb: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetNetworkProxy(
        system: *mut FMOD_SYSTEM,
        proxy: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetNetworkProxy(
        system: *mut FMOD_SYSTEM,
        proxy: *mut ::std::os::raw::c_char,
        proxylen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetNetworkTimeout(
        system: *mut FMOD_SYSTEM,
        timeout: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetNetworkTimeout(
        system: *mut FMOD_SYSTEM,
        timeout: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetUserData(
        system: *mut FMOD_SYSTEM,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetUserData(
        system: *mut FMOD_SYSTEM,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetMemoryInfo(
        system: *mut FMOD_SYSTEM,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Release(sound: *mut FMOD_SOUND) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetSystemObject(
        sound: *mut FMOD_SOUND,
        system: *mut *mut FMOD_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Lock(
        sound: *mut FMOD_SOUND,
        offset: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
        ptr1: *mut *mut ::std::os::raw::c_void,
        ptr2: *mut *mut ::std::os::raw::c_void,
        len1: *mut ::std::os::raw::c_uint,
        len2: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Unlock(
        sound: *mut FMOD_SOUND,
        ptr1: *mut ::std::os::raw::c_void,
        ptr2: *mut ::std::os::raw::c_void,
        len1: ::std::os::raw::c_uint,
        len2: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetDefaults(
        sound: *mut FMOD_SOUND,
        frequency: f32,
        volume: f32,
        pan: f32,
        priority: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetDefaults(
        sound: *mut FMOD_SOUND,
        frequency: *mut f32,
        volume: *mut f32,
        pan: *mut f32,
        priority: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetVariations(
        sound: *mut FMOD_SOUND,
        frequencyvar: f32,
        volumevar: f32,
        panvar: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetVariations(
        sound: *mut FMOD_SOUND,
        frequencyvar: *mut f32,
        volumevar: *mut f32,
        panvar: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Set3DMinMaxDistance(
        sound: *mut FMOD_SOUND,
        min: f32,
        max: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Get3DMinMaxDistance(
        sound: *mut FMOD_SOUND,
        min: *mut f32,
        max: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Set3DConeSettings(
        sound: *mut FMOD_SOUND,
        insideconeangle: f32,
        outsideconeangle: f32,
        outsidevolume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Get3DConeSettings(
        sound: *mut FMOD_SOUND,
        insideconeangle: *mut f32,
        outsideconeangle: *mut f32,
        outsidevolume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Set3DCustomRolloff(
        sound: *mut FMOD_SOUND,
        points: *mut FMOD_VECTOR,
        numpoints: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Get3DCustomRolloff(
        sound: *mut FMOD_SOUND,
        points: *mut *mut FMOD_VECTOR,
        numpoints: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetSubSound(
        sound: *mut FMOD_SOUND,
        index: ::std::os::raw::c_int,
        subsound: *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetSubSound(
        sound: *mut FMOD_SOUND,
        index: ::std::os::raw::c_int,
        subsound: *mut *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetSubSoundParent(
        sound: *mut FMOD_SOUND,
        parentsound: *mut *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetSubSoundSentence(
        sound: *mut FMOD_SOUND,
        subsoundlist: *mut ::std::os::raw::c_int,
        numsubsounds: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetName(
        sound: *mut FMOD_SOUND,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetLength(
        sound: *mut FMOD_SOUND,
        length: *mut ::std::os::raw::c_uint,
        lengthtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetFormat(
        sound: *mut FMOD_SOUND,
        type_: *mut FMOD_SOUND_TYPE,
        format: *mut FMOD_SOUND_FORMAT,
        channels: *mut ::std::os::raw::c_int,
        bits: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetNumSubSounds(
        sound: *mut FMOD_SOUND,
        numsubsounds: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetNumTags(
        sound: *mut FMOD_SOUND,
        numtags: *mut ::std::os::raw::c_int,
        numtagsupdated: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetTag(
        sound: *mut FMOD_SOUND,
        name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        tag: *mut FMOD_TAG,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetOpenState(
        sound: *mut FMOD_SOUND,
        openstate: *mut FMOD_OPENSTATE,
        percentbuffered: *mut ::std::os::raw::c_uint,
        starving: *mut FMOD_BOOL,
        diskbusy: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_ReadData(
        sound: *mut FMOD_SOUND,
        buffer: *mut ::std::os::raw::c_void,
        lenbytes: ::std::os::raw::c_uint,
        read: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SeekData(sound: *mut FMOD_SOUND, pcm: ::std::os::raw::c_uint) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetSoundGroup(
        sound: *mut FMOD_SOUND,
        soundgroup: *mut FMOD_SOUNDGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetSoundGroup(
        sound: *mut FMOD_SOUND,
        soundgroup: *mut *mut FMOD_SOUNDGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetNumSyncPoints(
        sound: *mut FMOD_SOUND,
        numsyncpoints: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetSyncPoint(
        sound: *mut FMOD_SOUND,
        index: ::std::os::raw::c_int,
        point: *mut *mut FMOD_SYNCPOINT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetSyncPointInfo(
        sound: *mut FMOD_SOUND,
        point: *mut FMOD_SYNCPOINT,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
        offset: *mut ::std::os::raw::c_uint,
        offsettype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_AddSyncPoint(
        sound: *mut FMOD_SOUND,
        offset: ::std::os::raw::c_uint,
        offsettype: FMOD_TIMEUNIT,
        name: *const ::std::os::raw::c_char,
        point: *mut *mut FMOD_SYNCPOINT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_DeleteSyncPoint(
        sound: *mut FMOD_SOUND,
        point: *mut FMOD_SYNCPOINT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetMode(sound: *mut FMOD_SOUND, mode: FMOD_MODE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetMode(sound: *mut FMOD_SOUND, mode: *mut FMOD_MODE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetLoopCount(
        sound: *mut FMOD_SOUND,
        loopcount: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetLoopCount(
        sound: *mut FMOD_SOUND,
        loopcount: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetLoopPoints(
        sound: *mut FMOD_SOUND,
        loopstart: ::std::os::raw::c_uint,
        loopstarttype: FMOD_TIMEUNIT,
        loopend: ::std::os::raw::c_uint,
        loopendtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetLoopPoints(
        sound: *mut FMOD_SOUND,
        loopstart: *mut ::std::os::raw::c_uint,
        loopstarttype: FMOD_TIMEUNIT,
        loopend: *mut ::std::os::raw::c_uint,
        loopendtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetMusicNumChannels(
        sound: *mut FMOD_SOUND,
        numchannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetMusicChannelVolume(
        sound: *mut FMOD_SOUND,
        channel: ::std::os::raw::c_int,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetMusicChannelVolume(
        sound: *mut FMOD_SOUND,
        channel: ::std::os::raw::c_int,
        volume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetMusicSpeed(sound: *mut FMOD_SOUND, speed: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetMusicSpeed(sound: *mut FMOD_SOUND, speed: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetUserData(
        sound: *mut FMOD_SOUND,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetUserData(
        sound: *mut FMOD_SOUND,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetMemoryInfo(
        sound: *mut FMOD_SOUND,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetSystemObject(
        channel: *mut FMOD_CHANNEL,
        system: *mut *mut FMOD_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Stop(channel: *mut FMOD_CHANNEL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetPaused(channel: *mut FMOD_CHANNEL, paused: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetPaused(
        channel: *mut FMOD_CHANNEL,
        paused: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetVolume(channel: *mut FMOD_CHANNEL, volume: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetVolume(channel: *mut FMOD_CHANNEL, volume: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetFrequency(channel: *mut FMOD_CHANNEL, frequency: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetFrequency(
        channel: *mut FMOD_CHANNEL,
        frequency: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetPan(channel: *mut FMOD_CHANNEL, pan: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetPan(channel: *mut FMOD_CHANNEL, pan: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetDelay(
        channel: *mut FMOD_CHANNEL,
        delaytype: FMOD_DELAYTYPE,
        delayhi: ::std::os::raw::c_uint,
        delaylo: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetDelay(
        channel: *mut FMOD_CHANNEL,
        delaytype: FMOD_DELAYTYPE,
        delayhi: *mut ::std::os::raw::c_uint,
        delaylo: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetSpeakerMix(
        channel: *mut FMOD_CHANNEL,
        frontleft: f32,
        frontright: f32,
        center: f32,
        lfe: f32,
        backleft: f32,
        backright: f32,
        sideleft: f32,
        sideright: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetSpeakerMix(
        channel: *mut FMOD_CHANNEL,
        frontleft: *mut f32,
        frontright: *mut f32,
        center: *mut f32,
        lfe: *mut f32,
        backleft: *mut f32,
        backright: *mut f32,
        sideleft: *mut f32,
        sideright: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetSpeakerLevels(
        channel: *mut FMOD_CHANNEL,
        speaker: FMOD_SPEAKER,
        levels: *mut f32,
        numlevels: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetSpeakerLevels(
        channel: *mut FMOD_CHANNEL,
        speaker: FMOD_SPEAKER,
        levels: *mut f32,
        numlevels: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetInputChannelMix(
        channel: *mut FMOD_CHANNEL,
        levels: *mut f32,
        numlevels: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetInputChannelMix(
        channel: *mut FMOD_CHANNEL,
        levels: *mut f32,
        numlevels: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetMute(channel: *mut FMOD_CHANNEL, mute: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetMute(channel: *mut FMOD_CHANNEL, mute: *mut FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetPriority(
        channel: *mut FMOD_CHANNEL,
        priority: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetPriority(
        channel: *mut FMOD_CHANNEL,
        priority: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetPosition(
        channel: *mut FMOD_CHANNEL,
        position: ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetPosition(
        channel: *mut FMOD_CHANNEL,
        position: *mut ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetReverbProperties(
        channel: *mut FMOD_CHANNEL,
        prop: *const FMOD_REVERB_CHANNELPROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetReverbProperties(
        channel: *mut FMOD_CHANNEL,
        prop: *mut FMOD_REVERB_CHANNELPROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetLowPassGain(channel: *mut FMOD_CHANNEL, gain: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetLowPassGain(channel: *mut FMOD_CHANNEL, gain: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetChannelGroup(
        channel: *mut FMOD_CHANNEL,
        channelgroup: *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetChannelGroup(
        channel: *mut FMOD_CHANNEL,
        channelgroup: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetCallback(
        channel: *mut FMOD_CHANNEL,
        callback: FMOD_CHANNEL_CALLBACK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DAttributes(
        channel: *mut FMOD_CHANNEL,
        pos: *const FMOD_VECTOR,
        vel: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DAttributes(
        channel: *mut FMOD_CHANNEL,
        pos: *mut FMOD_VECTOR,
        vel: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DMinMaxDistance(
        channel: *mut FMOD_CHANNEL,
        mindistance: f32,
        maxdistance: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DMinMaxDistance(
        channel: *mut FMOD_CHANNEL,
        mindistance: *mut f32,
        maxdistance: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DConeSettings(
        channel: *mut FMOD_CHANNEL,
        insideconeangle: f32,
        outsideconeangle: f32,
        outsidevolume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DConeSettings(
        channel: *mut FMOD_CHANNEL,
        insideconeangle: *mut f32,
        outsideconeangle: *mut f32,
        outsidevolume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DConeOrientation(
        channel: *mut FMOD_CHANNEL,
        orientation: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DConeOrientation(
        channel: *mut FMOD_CHANNEL,
        orientation: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DCustomRolloff(
        channel: *mut FMOD_CHANNEL,
        points: *mut FMOD_VECTOR,
        numpoints: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DCustomRolloff(
        channel: *mut FMOD_CHANNEL,
        points: *mut *mut FMOD_VECTOR,
        numpoints: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DOcclusion(
        channel: *mut FMOD_CHANNEL,
        directocclusion: f32,
        reverbocclusion: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DOcclusion(
        channel: *mut FMOD_CHANNEL,
        directocclusion: *mut f32,
        reverbocclusion: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DSpread(channel: *mut FMOD_CHANNEL, angle: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DSpread(channel: *mut FMOD_CHANNEL, angle: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DPanLevel(channel: *mut FMOD_CHANNEL, level: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DPanLevel(channel: *mut FMOD_CHANNEL, level: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DDopplerLevel(channel: *mut FMOD_CHANNEL, level: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DDopplerLevel(
        channel: *mut FMOD_CHANNEL,
        level: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DDistanceFilter(
        channel: *mut FMOD_CHANNEL,
        custom: FMOD_BOOL,
        customLevel: f32,
        centerFreq: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DDistanceFilter(
        channel: *mut FMOD_CHANNEL,
        custom: *mut FMOD_BOOL,
        customLevel: *mut f32,
        centerFreq: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetDSPHead(
        channel: *mut FMOD_CHANNEL,
        dsp: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_AddDSP(
        channel: *mut FMOD_CHANNEL,
        dsp: *mut FMOD_DSP,
        connection: *mut *mut FMOD_DSPCONNECTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_IsPlaying(
        channel: *mut FMOD_CHANNEL,
        isplaying: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_IsVirtual(
        channel: *mut FMOD_CHANNEL,
        isvirtual: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetAudibility(
        channel: *mut FMOD_CHANNEL,
        audibility: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetCurrentSound(
        channel: *mut FMOD_CHANNEL,
        sound: *mut *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetSpectrum(
        channel: *mut FMOD_CHANNEL,
        spectrumarray: *mut f32,
        numvalues: ::std::os::raw::c_int,
        channeloffset: ::std::os::raw::c_int,
        windowtype: FMOD_DSP_FFT_WINDOW,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetWaveData(
        channel: *mut FMOD_CHANNEL,
        wavearray: *mut f32,
        numvalues: ::std::os::raw::c_int,
        channeloffset: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetIndex(
        channel: *mut FMOD_CHANNEL,
        index: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetMode(channel: *mut FMOD_CHANNEL, mode: FMOD_MODE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetMode(channel: *mut FMOD_CHANNEL, mode: *mut FMOD_MODE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetLoopCount(
        channel: *mut FMOD_CHANNEL,
        loopcount: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetLoopCount(
        channel: *mut FMOD_CHANNEL,
        loopcount: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetLoopPoints(
        channel: *mut FMOD_CHANNEL,
        loopstart: ::std::os::raw::c_uint,
        loopstarttype: FMOD_TIMEUNIT,
        loopend: ::std::os::raw::c_uint,
        loopendtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetLoopPoints(
        channel: *mut FMOD_CHANNEL,
        loopstart: *mut ::std::os::raw::c_uint,
        loopstarttype: FMOD_TIMEUNIT,
        loopend: *mut ::std::os::raw::c_uint,
        loopendtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetUserData(
        channel: *mut FMOD_CHANNEL,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetUserData(
        channel: *mut FMOD_CHANNEL,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetMemoryInfo(
        channel: *mut FMOD_CHANNEL,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Release(channelgroup: *mut FMOD_CHANNELGROUP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetSystemObject(
        channelgroup: *mut FMOD_CHANNELGROUP,
        system: *mut *mut FMOD_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetVolume(
        channelgroup: *mut FMOD_CHANNELGROUP,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetVolume(
        channelgroup: *mut FMOD_CHANNELGROUP,
        volume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetPitch(
        channelgroup: *mut FMOD_CHANNELGROUP,
        pitch: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetPitch(
        channelgroup: *mut FMOD_CHANNELGROUP,
        pitch: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Set3DOcclusion(
        channelgroup: *mut FMOD_CHANNELGROUP,
        directocclusion: f32,
        reverbocclusion: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Get3DOcclusion(
        channelgroup: *mut FMOD_CHANNELGROUP,
        directocclusion: *mut f32,
        reverbocclusion: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetPaused(
        channelgroup: *mut FMOD_CHANNELGROUP,
        paused: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetPaused(
        channelgroup: *mut FMOD_CHANNELGROUP,
        paused: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetMute(
        channelgroup: *mut FMOD_CHANNELGROUP,
        mute: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetMute(
        channelgroup: *mut FMOD_CHANNELGROUP,
        mute: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Stop(channelgroup: *mut FMOD_CHANNELGROUP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_OverrideVolume(
        channelgroup: *mut FMOD_CHANNELGROUP,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_OverrideFrequency(
        channelgroup: *mut FMOD_CHANNELGROUP,
        frequency: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_OverridePan(
        channelgroup: *mut FMOD_CHANNELGROUP,
        pan: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_OverrideReverbProperties(
        channelgroup: *mut FMOD_CHANNELGROUP,
        prop: *const FMOD_REVERB_CHANNELPROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Override3DAttributes(
        channelgroup: *mut FMOD_CHANNELGROUP,
        pos: *const FMOD_VECTOR,
        vel: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_OverrideSpeakerMix(
        channelgroup: *mut FMOD_CHANNELGROUP,
        frontleft: f32,
        frontright: f32,
        center: f32,
        lfe: f32,
        backleft: f32,
        backright: f32,
        sideleft: f32,
        sideright: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_AddGroup(
        channelgroup: *mut FMOD_CHANNELGROUP,
        group: *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetNumGroups(
        channelgroup: *mut FMOD_CHANNELGROUP,
        numgroups: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetGroup(
        channelgroup: *mut FMOD_CHANNELGROUP,
        index: ::std::os::raw::c_int,
        group: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetParentGroup(
        channelgroup: *mut FMOD_CHANNELGROUP,
        group: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetDSPHead(
        channelgroup: *mut FMOD_CHANNELGROUP,
        dsp: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_AddDSP(
        channelgroup: *mut FMOD_CHANNELGROUP,
        dsp: *mut FMOD_DSP,
        connection: *mut *mut FMOD_DSPCONNECTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetName(
        channelgroup: *mut FMOD_CHANNELGROUP,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetNumChannels(
        channelgroup: *mut FMOD_CHANNELGROUP,
        numchannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetChannel(
        channelgroup: *mut FMOD_CHANNELGROUP,
        index: ::std::os::raw::c_int,
        channel: *mut *mut FMOD_CHANNEL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetSpectrum(
        channelgroup: *mut FMOD_CHANNELGROUP,
        spectrumarray: *mut f32,
        numvalues: ::std::os::raw::c_int,
        channeloffset: ::std::os::raw::c_int,
        windowtype: FMOD_DSP_FFT_WINDOW,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetWaveData(
        channelgroup: *mut FMOD_CHANNELGROUP,
        wavearray: *mut f32,
        numvalues: ::std::os::raw::c_int,
        channeloffset: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetUserData(
        channelgroup: *mut FMOD_CHANNELGROUP,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetUserData(
        channelgroup: *mut FMOD_CHANNELGROUP,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetMemoryInfo(
        channelgroup: *mut FMOD_CHANNELGROUP,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_Release(soundgroup: *mut FMOD_SOUNDGROUP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetSystemObject(
        soundgroup: *mut FMOD_SOUNDGROUP,
        system: *mut *mut FMOD_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_SetMaxAudible(
        soundgroup: *mut FMOD_SOUNDGROUP,
        maxaudible: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetMaxAudible(
        soundgroup: *mut FMOD_SOUNDGROUP,
        maxaudible: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_SetMaxAudibleBehavior(
        soundgroup: *mut FMOD_SOUNDGROUP,
        behavior: FMOD_SOUNDGROUP_BEHAVIOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetMaxAudibleBehavior(
        soundgroup: *mut FMOD_SOUNDGROUP,
        behavior: *mut FMOD_SOUNDGROUP_BEHAVIOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_SetMuteFadeSpeed(
        soundgroup: *mut FMOD_SOUNDGROUP,
        speed: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetMuteFadeSpeed(
        soundgroup: *mut FMOD_SOUNDGROUP,
        speed: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_SetVolume(soundgroup: *mut FMOD_SOUNDGROUP, volume: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetVolume(
        soundgroup: *mut FMOD_SOUNDGROUP,
        volume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_Stop(soundgroup: *mut FMOD_SOUNDGROUP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetName(
        soundgroup: *mut FMOD_SOUNDGROUP,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetNumSounds(
        soundgroup: *mut FMOD_SOUNDGROUP,
        numsounds: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetSound(
        soundgroup: *mut FMOD_SOUNDGROUP,
        index: ::std::os::raw::c_int,
        sound: *mut *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetNumPlaying(
        soundgroup: *mut FMOD_SOUNDGROUP,
        numplaying: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_SetUserData(
        soundgroup: *mut FMOD_SOUNDGROUP,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetUserData(
        soundgroup: *mut FMOD_SOUNDGROUP,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetMemoryInfo(
        soundgroup: *mut FMOD_SOUNDGROUP,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_Release(dsp: *mut FMOD_DSP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetSystemObject(
        dsp: *mut FMOD_DSP,
        system: *mut *mut FMOD_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_AddInput(
        dsp: *mut FMOD_DSP,
        target: *mut FMOD_DSP,
        connection: *mut *mut FMOD_DSPCONNECTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_DisconnectFrom(dsp: *mut FMOD_DSP, target: *mut FMOD_DSP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_DisconnectAll(
        dsp: *mut FMOD_DSP,
        inputs: FMOD_BOOL,
        outputs: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_Remove(dsp: *mut FMOD_DSP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetNumInputs(
        dsp: *mut FMOD_DSP,
        numinputs: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetNumOutputs(
        dsp: *mut FMOD_DSP,
        numoutputs: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetInput(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        input: *mut *mut FMOD_DSP,
        inputconnection: *mut *mut FMOD_DSPCONNECTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetOutput(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        output: *mut *mut FMOD_DSP,
        outputconnection: *mut *mut FMOD_DSPCONNECTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetActive(dsp: *mut FMOD_DSP, active: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetActive(dsp: *mut FMOD_DSP, active: *mut FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetBypass(dsp: *mut FMOD_DSP, bypass: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetBypass(dsp: *mut FMOD_DSP, bypass: *mut FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetSpeakerActive(
        dsp: *mut FMOD_DSP,
        speaker: FMOD_SPEAKER,
        active: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetSpeakerActive(
        dsp: *mut FMOD_DSP,
        speaker: FMOD_SPEAKER,
        active: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_Reset(dsp: *mut FMOD_DSP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetParameter(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        value: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetParameter(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        value: *mut f32,
        valuestr: *mut ::std::os::raw::c_char,
        valuestrlen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetNumParameters(
        dsp: *mut FMOD_DSP,
        numparams: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetParameterInfo(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        label: *mut ::std::os::raw::c_char,
        description: *mut ::std::os::raw::c_char,
        descriptionlen: ::std::os::raw::c_int,
        min: *mut f32,
        max: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_ShowConfigDialog(
        dsp: *mut FMOD_DSP,
        hwnd: *mut ::std::os::raw::c_void,
        show: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetInfo(
        dsp: *mut FMOD_DSP,
        name: *mut ::std::os::raw::c_char,
        version: *mut ::std::os::raw::c_uint,
        channels: *mut ::std::os::raw::c_int,
        configwidth: *mut ::std::os::raw::c_int,
        configheight: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetType(dsp: *mut FMOD_DSP, type_: *mut FMOD_DSP_TYPE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetDefaults(
        dsp: *mut FMOD_DSP,
        frequency: f32,
        volume: f32,
        pan: f32,
        priority: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetDefaults(
        dsp: *mut FMOD_DSP,
        frequency: *mut f32,
        volume: *mut f32,
        pan: *mut f32,
        priority: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetUserData(
        dsp: *mut FMOD_DSP,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetUserData(
        dsp: *mut FMOD_DSP,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetMemoryInfo(
        dsp: *mut FMOD_DSP,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_GetInput(
        dspconnection: *mut FMOD_DSPCONNECTION,
        input: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_GetOutput(
        dspconnection: *mut FMOD_DSPCONNECTION,
        output: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_SetMix(
        dspconnection: *mut FMOD_DSPCONNECTION,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_GetMix(
        dspconnection: *mut FMOD_DSPCONNECTION,
        volume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_SetLevels(
        dspconnection: *mut FMOD_DSPCONNECTION,
        speaker: FMOD_SPEAKER,
        levels: *mut f32,
        numlevels: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_GetLevels(
        dspconnection: *mut FMOD_DSPCONNECTION,
        speaker: FMOD_SPEAKER,
        levels: *mut f32,
        numlevels: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_SetUserData(
        dspconnection: *mut FMOD_DSPCONNECTION,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_GetUserData(
        dspconnection: *mut FMOD_DSPCONNECTION,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_GetMemoryInfo(
        dspconnection: *mut FMOD_DSPCONNECTION,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_Release(geometry: *mut FMOD_GEOMETRY) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_AddPolygon(
        geometry: *mut FMOD_GEOMETRY,
        directocclusion: f32,
        reverbocclusion: f32,
        doublesided: FMOD_BOOL,
        numvertices: ::std::os::raw::c_int,
        vertices: *const FMOD_VECTOR,
        polygonindex: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetNumPolygons(
        geometry: *mut FMOD_GEOMETRY,
        numpolygons: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetMaxPolygons(
        geometry: *mut FMOD_GEOMETRY,
        maxpolygons: *mut ::std::os::raw::c_int,
        maxvertices: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetPolygonNumVertices(
        geometry: *mut FMOD_GEOMETRY,
        index: ::std::os::raw::c_int,
        numvertices: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetPolygonVertex(
        geometry: *mut FMOD_GEOMETRY,
        index: ::std::os::raw::c_int,
        vertexindex: ::std::os::raw::c_int,
        vertex: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetPolygonVertex(
        geometry: *mut FMOD_GEOMETRY,
        index: ::std::os::raw::c_int,
        vertexindex: ::std::os::raw::c_int,
        vertex: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetPolygonAttributes(
        geometry: *mut FMOD_GEOMETRY,
        index: ::std::os::raw::c_int,
        directocclusion: f32,
        reverbocclusion: f32,
        doublesided: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetPolygonAttributes(
        geometry: *mut FMOD_GEOMETRY,
        index: ::std::os::raw::c_int,
        directocclusion: *mut f32,
        reverbocclusion: *mut f32,
        doublesided: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetActive(geometry: *mut FMOD_GEOMETRY, active: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetActive(
        geometry: *mut FMOD_GEOMETRY,
        active: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetRotation(
        geometry: *mut FMOD_GEOMETRY,
        forward: *const FMOD_VECTOR,
        up: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetRotation(
        geometry: *mut FMOD_GEOMETRY,
        forward: *mut FMOD_VECTOR,
        up: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetPosition(
        geometry: *mut FMOD_GEOMETRY,
        position: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetPosition(
        geometry: *mut FMOD_GEOMETRY,
        position: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetScale(
        geometry: *mut FMOD_GEOMETRY,
        scale: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetScale(
        geometry: *mut FMOD_GEOMETRY,
        scale: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_Save(
        geometry: *mut FMOD_GEOMETRY,
        data: *mut ::std::os::raw::c_void,
        datasize: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetUserData(
        geometry: *mut FMOD_GEOMETRY,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetUserData(
        geometry: *mut FMOD_GEOMETRY,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetMemoryInfo(
        geometry: *mut FMOD_GEOMETRY,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb_Release(reverb: *mut FMOD_REVERB) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb_Set3DAttributes(
        reverb: *mut FMOD_REVERB,
        position: *const FMOD_VECTOR,
        mindistance: f32,
        maxdistance: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb_Get3DAttributes(
        reverb: *mut FMOD_REVERB,
        position: *mut FMOD_VECTOR,
        mindistance: *mut f32,
        maxdistance: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb_SetProperties(
        reverb: *mut FMOD_REVERB,
        properties: *const FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb_GetProperties(
        reverb: *mut FMOD_REVERB,
        properties: *mut FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb_SetActive(reverb: *mut FMOD_REVERB, active: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb_GetActive(reverb: *mut FMOD_REVERB, active: *mut FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb_SetUserData(
        reverb: *mut FMOD_REVERB,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb_GetUserData(
        reverb: *mut FMOD_REVERB,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb_GetMemoryInfo(
        reverb: *mut FMOD_REVERB,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENTSYSTEM {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENTPROJECT {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENTGROUP {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENTCATEGORY {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct FMOD_EVENT {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENTPARAMETER {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENTREVERB {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENTQUEUE {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENTQUEUEENTRY {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_MUSICPROMPT {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_MUSICSYSTEM {
    _unused: [u8; 0],
}
pub type FMOD_EVENT_INITFLAGS = ::std::os::raw::c_uint;
pub type FMOD_EVENT_MODE = ::std::os::raw::c_uint;
pub type FMOD_EVENT_STATE = ::std::os::raw::c_uint;
pub type FMOD_MUSIC_ID = ::std::os::raw::c_uint;
pub type FMOD_MUSIC_CUE_ID = FMOD_MUSIC_ID;
pub type FMOD_MUSIC_PARAM_ID = FMOD_MUSIC_ID;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_NAME: FMOD_EVENT_PROPERTY = 0;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_VOLUME: FMOD_EVENT_PROPERTY = 1;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_VOLUMERANDOMIZATION: FMOD_EVENT_PROPERTY = 2;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_PITCH: FMOD_EVENT_PROPERTY = 3;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_PITCH_OCTAVES: FMOD_EVENT_PROPERTY = 4;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_PITCH_SEMITONES: FMOD_EVENT_PROPERTY = 5;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_PITCH_TONES: FMOD_EVENT_PROPERTY = 6;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_PITCHRANDOMIZATION: FMOD_EVENT_PROPERTY = 7;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_OCTAVES: FMOD_EVENT_PROPERTY =
    8;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_SEMITONES: FMOD_EVENT_PROPERTY =
    9;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_TONES: FMOD_EVENT_PROPERTY = 10;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_PRIORITY: FMOD_EVENT_PROPERTY = 11;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_MAX_PLAYBACKS: FMOD_EVENT_PROPERTY = 12;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_MAX_PLAYBACKS_BEHAVIOR: FMOD_EVENT_PROPERTY = 13;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_MODE: FMOD_EVENT_PROPERTY = 14;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_IGNORE_GEOMETRY: FMOD_EVENT_PROPERTY = 15;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_ROLLOFF: FMOD_EVENT_PROPERTY = 16;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_MINDISTANCE: FMOD_EVENT_PROPERTY = 17;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_MAXDISTANCE: FMOD_EVENT_PROPERTY = 18;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_POSITION: FMOD_EVENT_PROPERTY = 19;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_CONEINSIDEANGLE: FMOD_EVENT_PROPERTY = 20;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_CONEOUTSIDEANGLE: FMOD_EVENT_PROPERTY = 21;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_CONEOUTSIDEVOLUME: FMOD_EVENT_PROPERTY = 22;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_DOPPLERSCALE: FMOD_EVENT_PROPERTY = 23;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_SPEAKERSPREAD: FMOD_EVENT_PROPERTY = 24;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_PANLEVEL: FMOD_EVENT_PROPERTY = 25;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_SPEAKER_L: FMOD_EVENT_PROPERTY = 26;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_SPEAKER_C: FMOD_EVENT_PROPERTY = 27;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_SPEAKER_R: FMOD_EVENT_PROPERTY = 28;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_SPEAKER_LS: FMOD_EVENT_PROPERTY = 29;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_SPEAKER_RS: FMOD_EVENT_PROPERTY = 30;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_SPEAKER_LR: FMOD_EVENT_PROPERTY = 31;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_SPEAKER_RR: FMOD_EVENT_PROPERTY = 32;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_SPEAKER_LFE: FMOD_EVENT_PROPERTY = 33;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_REVERBWETLEVEL: FMOD_EVENT_PROPERTY = 34;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_ONESHOT: FMOD_EVENT_PROPERTY = 35;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_FADEIN: FMOD_EVENT_PROPERTY = 36;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_FADEOUT: FMOD_EVENT_PROPERTY = 37;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_REVERBDRYLEVEL: FMOD_EVENT_PROPERTY = 38;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_TIMEOFFSET: FMOD_EVENT_PROPERTY = 39;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_SPAWNINTENSITY: FMOD_EVENT_PROPERTY = 40;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_SPAWNINTENSITY_RANDOMIZATION: FMOD_EVENT_PROPERTY =
    41;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_WII_CONTROLLERSPEAKERS: FMOD_EVENT_PROPERTY = 42;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_POSRANDOMIZATION_MIN: FMOD_EVENT_PROPERTY = 43;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_POSRANDOMIZATION_MAX: FMOD_EVENT_PROPERTY = 44;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_EVENTTYPE: FMOD_EVENT_PROPERTY = 45;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_STEAL_PRIORITY: FMOD_EVENT_PROPERTY = 46;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_EFFECTS_AFFECT_REVERB: FMOD_EVENT_PROPERTY = 47;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_WILL_TERMINATE: FMOD_EVENT_PROPERTY = 48;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_DSPCLOCKSTART_HI: FMOD_EVENT_PROPERTY = 49;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_DSPCLOCKSTART_LO: FMOD_EVENT_PROPERTY = 50;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_AUTO_DISTANCE_FILTERING: FMOD_EVENT_PROPERTY =
    51;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_3D_AUTO_DISTANCE_CENTER_FREQ: FMOD_EVENT_PROPERTY =
    52;
pub const FMOD_EVENT_PROPERTY_FMOD_EVENTPROPERTY_USER_BASE: FMOD_EVENT_PROPERTY = 53;
pub type FMOD_EVENT_PROPERTY = ::std::os::raw::c_uint;
pub const FMOD_EVENTPROPERTY_TYPE_FMOD_EVENTPROPERTY_TYPE_INT: FMOD_EVENTPROPERTY_TYPE = 0;
pub const FMOD_EVENTPROPERTY_TYPE_FMOD_EVENTPROPERTY_TYPE_FLOAT: FMOD_EVENTPROPERTY_TYPE = 1;
pub const FMOD_EVENTPROPERTY_TYPE_FMOD_EVENTPROPERTY_TYPE_STRING: FMOD_EVENTPROPERTY_TYPE = 2;
pub type FMOD_EVENTPROPERTY_TYPE = ::std::os::raw::c_uint;
pub const FMOD_EVENT_PITCHUNITS_FMOD_EVENT_PITCHUNITS_RAW: FMOD_EVENT_PITCHUNITS = 0;
pub const FMOD_EVENT_PITCHUNITS_FMOD_EVENT_PITCHUNITS_OCTAVES: FMOD_EVENT_PITCHUNITS = 1;
pub const FMOD_EVENT_PITCHUNITS_FMOD_EVENT_PITCHUNITS_SEMITONES: FMOD_EVENT_PITCHUNITS = 2;
pub const FMOD_EVENT_PITCHUNITS_FMOD_EVENT_PITCHUNITS_TONES: FMOD_EVENT_PITCHUNITS = 3;
pub type FMOD_EVENT_PITCHUNITS = ::std::os::raw::c_uint;
pub const FMOD_EVENT_RESOURCE_FMOD_EVENT_RESOURCE_STREAMS_AND_SAMPLES: FMOD_EVENT_RESOURCE = 0;
pub const FMOD_EVENT_RESOURCE_FMOD_EVENT_RESOURCE_STREAMS: FMOD_EVENT_RESOURCE = 1;
pub const FMOD_EVENT_RESOURCE_FMOD_EVENT_RESOURCE_SAMPLES: FMOD_EVENT_RESOURCE = 2;
pub type FMOD_EVENT_RESOURCE = ::std::os::raw::c_uint;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_SYNCPOINT: FMOD_EVENT_CALLBACKTYPE = 0;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_SOUNDDEF_START: FMOD_EVENT_CALLBACKTYPE =
    1;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_SOUNDDEF_END: FMOD_EVENT_CALLBACKTYPE = 2;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_STOLEN: FMOD_EVENT_CALLBACKTYPE = 3;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_EVENTFINISHED: FMOD_EVENT_CALLBACKTYPE =
    4;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_NET_MODIFIED: FMOD_EVENT_CALLBACKTYPE = 5;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_SOUNDDEF_CREATE: FMOD_EVENT_CALLBACKTYPE =
    6;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_SOUNDDEF_RELEASE:
    FMOD_EVENT_CALLBACKTYPE = 7;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_SOUNDDEF_INFO: FMOD_EVENT_CALLBACKTYPE =
    8;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_EVENTSTARTED: FMOD_EVENT_CALLBACKTYPE = 9;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_SOUNDDEF_SELECTINDEX:
    FMOD_EVENT_CALLBACKTYPE = 10;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_OCCLUSION: FMOD_EVENT_CALLBACKTYPE = 11;
pub const FMOD_EVENT_CALLBACKTYPE_FMOD_EVENT_CALLBACKTYPE_MAXSTREAMS: FMOD_EVENT_CALLBACKTYPE = 12;
pub type FMOD_EVENT_CALLBACKTYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENT_WAVEBANKINFO {
    pub name: [::std::os::raw::c_char; 256usize],
    pub streamrefcnt: ::std::os::raw::c_int,
    pub samplerefcnt: ::std::os::raw::c_int,
    pub numstreams: ::std::os::raw::c_int,
    pub maxstreams: ::std::os::raw::c_int,
    pub streamsinuse: ::std::os::raw::c_int,
    pub streammemory: ::std::os::raw::c_uint,
    pub samplememory: ::std::os::raw::c_uint,
    pub type_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_EVENT_WAVEBANKINFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_EVENT_WAVEBANKINFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_EVENT_WAVEBANKINFO>(),
        288usize,
        concat!("Size of: ", stringify!(FMOD_EVENT_WAVEBANKINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_EVENT_WAVEBANKINFO>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_EVENT_WAVEBANKINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_WAVEBANKINFO),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamrefcnt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_WAVEBANKINFO),
            "::",
            stringify!(streamrefcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplerefcnt) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_WAVEBANKINFO),
            "::",
            stringify!(samplerefcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numstreams) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_WAVEBANKINFO),
            "::",
            stringify!(numstreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxstreams) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_WAVEBANKINFO),
            "::",
            stringify!(maxstreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamsinuse) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_WAVEBANKINFO),
            "::",
            stringify!(streamsinuse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streammemory) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_WAVEBANKINFO),
            "::",
            stringify!(streammemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplememory) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_WAVEBANKINFO),
            "::",
            stringify!(samplememory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_WAVEBANKINFO),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENT_SYSTEMINFO {
    pub numevents: ::std::os::raw::c_int,
    pub numinstances: ::std::os::raw::c_int,
    pub maxwavebanks: ::std::os::raw::c_int,
    pub wavebankinfo: *mut FMOD_EVENT_WAVEBANKINFO,
    pub numplayingevents: ::std::os::raw::c_int,
    pub playingevents: *mut *mut FMOD_EVENT,
    pub numloadsqueued: [::std::os::raw::c_int; 5usize],
}
#[test]
fn bindgen_test_layout_FMOD_EVENT_SYSTEMINFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_EVENT_SYSTEMINFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_EVENT_SYSTEMINFO>(),
        64usize,
        concat!("Size of: ", stringify!(FMOD_EVENT_SYSTEMINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_EVENT_SYSTEMINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_EVENT_SYSTEMINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numevents) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_SYSTEMINFO),
            "::",
            stringify!(numevents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numinstances) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_SYSTEMINFO),
            "::",
            stringify!(numinstances)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxwavebanks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_SYSTEMINFO),
            "::",
            stringify!(maxwavebanks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wavebankinfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_SYSTEMINFO),
            "::",
            stringify!(wavebankinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numplayingevents) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_SYSTEMINFO),
            "::",
            stringify!(numplayingevents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).playingevents) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_SYSTEMINFO),
            "::",
            stringify!(playingevents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numloadsqueued) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_SYSTEMINFO),
            "::",
            stringify!(numloadsqueued)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENT_PROJECTINFO {
    pub index: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 256usize],
    pub numevents: ::std::os::raw::c_int,
    pub numinstances: ::std::os::raw::c_int,
    pub maxwavebanks: ::std::os::raw::c_int,
    pub wavebankinfo: *mut FMOD_EVENT_WAVEBANKINFO,
    pub numplayingevents: ::std::os::raw::c_int,
    pub playingevents: *mut *mut FMOD_EVENT,
}

impl FMOD_EVENT_PROJECTINFO {
    pub fn default() -> Self {
        FMOD_EVENT_PROJECTINFO { 
            index: 0, 
            name: [0; 256], 
            numevents: 0, 
            numinstances: 0, 
            maxwavebanks: 0, 
            wavebankinfo: std::ptr::null_mut(),
            numplayingevents: 0, 
            playingevents: std::ptr::null_mut(), 
        }
    }
}
#[test]
fn bindgen_test_layout_FMOD_EVENT_PROJECTINFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_EVENT_PROJECTINFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_EVENT_PROJECTINFO>(),
        296usize,
        concat!("Size of: ", stringify!(FMOD_EVENT_PROJECTINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_EVENT_PROJECTINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_EVENT_PROJECTINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_PROJECTINFO),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_PROJECTINFO),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numevents) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_PROJECTINFO),
            "::",
            stringify!(numevents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numinstances) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_PROJECTINFO),
            "::",
            stringify!(numinstances)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxwavebanks) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_PROJECTINFO),
            "::",
            stringify!(maxwavebanks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wavebankinfo) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_PROJECTINFO),
            "::",
            stringify!(wavebankinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numplayingevents) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_PROJECTINFO),
            "::",
            stringify!(numplayingevents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).playingevents) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_PROJECTINFO),
            "::",
            stringify!(playingevents)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENT_INFO {
    pub memoryused: ::std::os::raw::c_int,
    pub positionms: ::std::os::raw::c_int,
    pub lengthms: ::std::os::raw::c_int,
    pub channelsplaying: ::std::os::raw::c_int,
    pub instancesactive: ::std::os::raw::c_int,
    pub maxwavebanks: ::std::os::raw::c_int,
    pub wavebankinfo: *mut FMOD_EVENT_WAVEBANKINFO,
    pub projectid: ::std::os::raw::c_uint,
    pub systemid: ::std::os::raw::c_uint,
    pub audibility: f32,
    pub numinstances: ::std::os::raw::c_int,
    pub instances: *mut *mut FMOD_EVENT,
    pub guid: *mut FMOD_GUID,
}

impl FMOD_EVENT_INFO {
    pub fn default() -> Self {
        FMOD_EVENT_INFO {
            memoryused: 0,
            lengthms: 0,
            positionms: 0,
            channelsplaying: 0,
            instancesactive: 0,
            maxwavebanks: 0,
            wavebankinfo: std::ptr::null_mut(),
            projectid: 0,
            systemid: 0,
            audibility: 0.0,
            numinstances: 0,
            instances: std::ptr::null_mut(),
            guid: std::ptr::null_mut(),
        }
    }
}
#[test]
fn bindgen_test_layout_FMOD_EVENT_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_EVENT_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_EVENT_INFO>(),
        64usize,
        concat!("Size of: ", stringify!(FMOD_EVENT_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_EVENT_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_EVENT_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(memoryused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positionms) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(positionms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengthms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(lengthms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsplaying) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(channelsplaying)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instancesactive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(instancesactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxwavebanks) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(maxwavebanks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wavebankinfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(wavebankinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).projectid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(projectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).systemid) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(systemid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audibility) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(audibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numinstances) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(numinstances)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instances) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(instances)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guid) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_INFO),
            "::",
            stringify!(guid)
        )
    );
}
pub const FMOD_EVENT_SOUNDDEF_ENTRYTYPE_FMOD_EVENT_SOUNDDEF_ENTRYTYPE_WAVETABLE:
    FMOD_EVENT_SOUNDDEF_ENTRYTYPE = 0;
pub const FMOD_EVENT_SOUNDDEF_ENTRYTYPE_FMOD_EVENT_SOUNDDEF_ENTRYTYPE_OSCILLATOR:
    FMOD_EVENT_SOUNDDEF_ENTRYTYPE = 1;
pub const FMOD_EVENT_SOUNDDEF_ENTRYTYPE_FMOD_EVENT_SOUNDDEF_ENTRYTYPE_NULL:
    FMOD_EVENT_SOUNDDEF_ENTRYTYPE = 2;
pub const FMOD_EVENT_SOUNDDEF_ENTRYTYPE_FMOD_EVENT_SOUNDDEF_ENTRYTYPE_PROGRAMMER:
    FMOD_EVENT_SOUNDDEF_ENTRYTYPE = 3;
pub type FMOD_EVENT_SOUNDDEF_ENTRYTYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENT_SOUNDDEFINFO {
    pub name: *mut ::std::os::raw::c_char,
    pub numentries: ::std::os::raw::c_int,
    pub entrynames: *mut *const ::std::os::raw::c_char,
    pub entrytypes: *mut FMOD_EVENT_SOUNDDEF_ENTRYTYPE,
}
#[test]
fn bindgen_test_layout_FMOD_EVENT_SOUNDDEFINFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_EVENT_SOUNDDEFINFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_EVENT_SOUNDDEFINFO>(),
        32usize,
        concat!("Size of: ", stringify!(FMOD_EVENT_SOUNDDEFINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_EVENT_SOUNDDEFINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_EVENT_SOUNDDEFINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_SOUNDDEFINFO),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numentries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_SOUNDDEFINFO),
            "::",
            stringify!(numentries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entrynames) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_SOUNDDEFINFO),
            "::",
            stringify!(entrynames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entrytypes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_SOUNDDEFINFO),
            "::",
            stringify!(entrytypes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_EVENT_LOADINFO {
    pub size: ::std::os::raw::c_uint,
    pub encryptionkey: *mut ::std::os::raw::c_char,
    pub sounddefentrylimit: f32,
    pub loadfrommemory_length: ::std::os::raw::c_uint,
    pub override_category_vals: FMOD_BOOL,
    pub sizeof_instancepool_simple: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FMOD_EVENT_LOADINFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_EVENT_LOADINFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_EVENT_LOADINFO>(),
        32usize,
        concat!("Size of: ", stringify!(FMOD_EVENT_LOADINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_EVENT_LOADINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_EVENT_LOADINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_LOADINFO),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encryptionkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_LOADINFO),
            "::",
            stringify!(encryptionkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sounddefentrylimit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_LOADINFO),
            "::",
            stringify!(sounddefentrylimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadfrommemory_length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_LOADINFO),
            "::",
            stringify!(loadfrommemory_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).override_category_vals) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_LOADINFO),
            "::",
            stringify!(override_category_vals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeof_instancepool_simple) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_EVENT_LOADINFO),
            "::",
            stringify!(sizeof_instancepool_simple)
        )
    );
}
pub type FMOD_EVENT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        event: *mut FMOD_EVENT,
        type_: FMOD_EVENT_CALLBACKTYPE,
        param1: *mut ::std::os::raw::c_void,
        param2: *mut ::std::os::raw::c_void,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub const FMOD_EVENTQUEUE_CALLBACKTYPE_FMOD_EVENTQUEUE_CALLBACKTYPE_PREPARE:
    FMOD_EVENTQUEUE_CALLBACKTYPE = 0;
pub const FMOD_EVENTQUEUE_CALLBACKTYPE_FMOD_EVENTQUEUE_CALLBACKTYPE_ABOUTTOPLAY:
    FMOD_EVENTQUEUE_CALLBACKTYPE = 1;
pub const FMOD_EVENTQUEUE_CALLBACKTYPE_FMOD_EVENTQUEUE_CALLBACKTYPE_FINISHED:
    FMOD_EVENTQUEUE_CALLBACKTYPE = 2;
pub const FMOD_EVENTQUEUE_CALLBACKTYPE_FMOD_EVENTQUEUE_CALLBACKTYPE_EXPIRED:
    FMOD_EVENTQUEUE_CALLBACKTYPE = 3;
pub type FMOD_EVENTQUEUE_CALLBACKTYPE = ::std::os::raw::c_uint;
pub type FMOD_EVENTQUEUE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        type_: FMOD_EVENTQUEUE_CALLBACKTYPE,
        queue: *mut FMOD_EVENTQUEUE,
        entry: *mut FMOD_EVENTQUEUEENTRY,
        callbackuserdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_MUSIC_INFO {
    pub starving: FMOD_BOOL,
    pub all_samples_loaded: FMOD_BOOL,
}
#[test]
fn bindgen_test_layout_FMOD_MUSIC_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_MUSIC_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_MUSIC_INFO>(),
        8usize,
        concat!("Size of: ", stringify!(FMOD_MUSIC_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_MUSIC_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_MUSIC_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).starving) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MUSIC_INFO),
            "::",
            stringify!(starving)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_samples_loaded) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MUSIC_INFO),
            "::",
            stringify!(all_samples_loaded)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_MUSIC_ENTITY {
    pub name: *const ::std::os::raw::c_char,
    pub id: FMOD_MUSIC_ID,
}
#[test]
fn bindgen_test_layout_FMOD_MUSIC_ENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_MUSIC_ENTITY> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_MUSIC_ENTITY>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_MUSIC_ENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_MUSIC_ENTITY>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_MUSIC_ENTITY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MUSIC_ENTITY),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MUSIC_ENTITY),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_MUSIC_ITERATOR {
    pub value: *const FMOD_MUSIC_ENTITY,
    pub filter: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FMOD_MUSIC_ITERATOR() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_MUSIC_ITERATOR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_MUSIC_ITERATOR>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_MUSIC_ITERATOR))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_MUSIC_ITERATOR>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_MUSIC_ITERATOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MUSIC_ITERATOR),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MUSIC_ITERATOR),
            "::",
            stringify!(filter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_MUSIC_SAMPLE_INFO {
    pub segment_id: ::std::os::raw::c_uint,
    pub index: ::std::os::raw::c_uint,
    pub filename: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FMOD_MUSIC_SAMPLE_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_MUSIC_SAMPLE_INFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_MUSIC_SAMPLE_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_MUSIC_SAMPLE_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_MUSIC_SAMPLE_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_MUSIC_SAMPLE_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segment_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MUSIC_SAMPLE_INFO),
            "::",
            stringify!(segment_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MUSIC_SAMPLE_INFO),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MUSIC_SAMPLE_INFO),
            "::",
            stringify!(filename)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_MUSIC_SEGMENT_INFO {
    pub segment_id: ::std::os::raw::c_uint,
    pub theme_id: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FMOD_MUSIC_SEGMENT_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<FMOD_MUSIC_SEGMENT_INFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMOD_MUSIC_SEGMENT_INFO>(),
        8usize,
        concat!("Size of: ", stringify!(FMOD_MUSIC_SEGMENT_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_MUSIC_SEGMENT_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_MUSIC_SEGMENT_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segment_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MUSIC_SEGMENT_INFO),
            "::",
            stringify!(segment_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).theme_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_MUSIC_SEGMENT_INFO),
            "::",
            stringify!(theme_id)
        )
    );
}
pub const FMOD_MUSIC_CALLBACKTYPE_FMOD_MUSIC_CALLBACKTYPE_SEGMENT_START: FMOD_MUSIC_CALLBACKTYPE =
    0;
pub const FMOD_MUSIC_CALLBACKTYPE_FMOD_MUSIC_CALLBACKTYPE_SEGMENT_END: FMOD_MUSIC_CALLBACKTYPE = 1;
pub const FMOD_MUSIC_CALLBACKTYPE_FMOD_MUSIC_CALLBACKTYPE_SAMPLE_CREATE: FMOD_MUSIC_CALLBACKTYPE =
    2;
pub const FMOD_MUSIC_CALLBACKTYPE_FMOD_MUSIC_CALLBACKTYPE_SAMPLE_RELEASE: FMOD_MUSIC_CALLBACKTYPE =
    3;
pub const FMOD_MUSIC_CALLBACKTYPE_FMOD_MUSIC_CALLBACKTYPE_CHANNEL_CREATED: FMOD_MUSIC_CALLBACKTYPE =
    4;
pub const FMOD_MUSIC_CALLBACKTYPE_FMOD_MUSIC_CALLBACKTYPE_CHANNEL_DESTROYED:
    FMOD_MUSIC_CALLBACKTYPE = 5;
pub const FMOD_MUSIC_CALLBACKTYPE_FMOD_MUSIC_CALLBACKTYPE_RESET: FMOD_MUSIC_CALLBACKTYPE = 6;
pub const FMOD_MUSIC_CALLBACKTYPE_FMOD_MUSIC_CALLBACKTYPE_BEAT: FMOD_MUSIC_CALLBACKTYPE = 7;
pub type FMOD_MUSIC_CALLBACKTYPE = ::std::os::raw::c_uint;
pub type FMOD_MUSIC_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        type_: FMOD_MUSIC_CALLBACKTYPE,
        param1: *mut ::std::os::raw::c_void,
        param2: *mut ::std::os::raw::c_void,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
extern "C" {
    pub fn FMOD_EventSystem_Create(eventsystem: *mut *mut FMOD_EVENTSYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_Init(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        maxchannels: ::std::os::raw::c_int,
        flags: FMOD_INITFLAGS,
        extradriverdata: *mut ::std::os::raw::c_void,
        eventflags: FMOD_EVENT_INITFLAGS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_Release(eventsystem: *mut FMOD_EVENTSYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_Update(eventsystem: *mut FMOD_EVENTSYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_SetMediaPath(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        path: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_SetPluginPath(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        path: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetVersion(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        version: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetInfo(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        info: *mut FMOD_EVENT_SYSTEMINFO,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetSystemObject(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        system: *mut *mut FMOD_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetMusicSystem(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        musicsystem: *mut *mut FMOD_MUSICSYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_SetLanguage(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        language: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetLanguage(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        language: *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_RegisterDSP(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        description: *mut FMOD_DSP_DESCRIPTION,
        handle: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_Load(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        name_or_data: *const ::std::os::raw::c_char,
        loadinfo: *mut FMOD_EVENT_LOADINFO,
        project: *mut *mut FMOD_EVENTPROJECT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_Unload(eventsystem: *mut FMOD_EVENTSYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetProject(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        name: *const ::std::os::raw::c_char,
        project: *mut *mut FMOD_EVENTPROJECT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetProjectByIndex(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        index: ::std::os::raw::c_int,
        project: *mut *mut FMOD_EVENTPROJECT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetNumProjects(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        numprojects: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetCategory(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        name: *const ::std::os::raw::c_char,
        category: *mut *mut FMOD_EVENTCATEGORY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetCategoryByIndex(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        index: ::std::os::raw::c_int,
        category: *mut *mut FMOD_EVENTCATEGORY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetMusicCategory(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        category: *mut *mut FMOD_EVENTCATEGORY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetNumCategories(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        numcategories: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetGroup(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        name: *const ::std::os::raw::c_char,
        cacheevents: FMOD_BOOL,
        group: *mut *mut FMOD_EVENTGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetEvent(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        name: *const ::std::os::raw::c_char,
        mode: FMOD_EVENT_MODE,
        event: *mut *mut FMOD_EVENT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetEventBySystemID(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        systemid: ::std::os::raw::c_uint,
        mode: FMOD_EVENT_MODE,
        event: *mut *mut FMOD_EVENT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetEventByGUID(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        guid: *const FMOD_GUID,
        mode: FMOD_EVENT_MODE,
        event: *mut *mut FMOD_EVENT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetEventByGUIDString(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        guid: *const ::std::os::raw::c_char,
        mode: FMOD_EVENT_MODE,
        event: *mut *mut FMOD_EVENT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetNumEvents(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        numevents: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_SetReverbProperties(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        props: *const FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetReverbProperties(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        props: *mut FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetReverbPreset(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        name: *const ::std::os::raw::c_char,
        props: *mut FMOD_REVERB_PROPERTIES,
        index: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetReverbPresetByIndex(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        index: ::std::os::raw::c_int,
        props: *mut FMOD_REVERB_PROPERTIES,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetNumReverbPresets(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        numpresets: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_CreateReverb(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        reverb: *mut *mut FMOD_EVENTREVERB,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_SetReverbAmbientProperties(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        props: *mut FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetReverbAmbientProperties(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        props: *mut FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_CreateEventQueue(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        queue: *mut *mut FMOD_EVENTQUEUE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_CreateEventQueueEntry(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        event: *mut FMOD_EVENT,
        entry: *mut *mut FMOD_EVENTQUEUEENTRY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_Set3DNumListeners(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        numlisteners: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_Get3DNumListeners(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        numlisteners: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_Set3DListenerAttributes(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        listener: ::std::os::raw::c_int,
        pos: *const FMOD_VECTOR,
        vel: *const FMOD_VECTOR,
        forward: *const FMOD_VECTOR,
        up: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_Get3DListenerAttributes(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        listener: ::std::os::raw::c_int,
        pos: *mut FMOD_VECTOR,
        vel: *mut FMOD_VECTOR,
        forward: *mut FMOD_VECTOR,
        up: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_SetUserData(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetUserData(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_PreloadFSB(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        filename: *const ::std::os::raw::c_char,
        streaminstance: ::std::os::raw::c_int,
        sound: *mut FMOD_SOUND,
        unloadprevious: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_UnloadFSB(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        filename: *const ::std::os::raw::c_char,
        streaminstance: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventSystem_GetMemoryInfo(
        eventsystem: *mut FMOD_EVENTSYSTEM,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_Release(eventproject: *mut FMOD_EVENTPROJECT) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_GetInfo(
        eventproject: *mut FMOD_EVENTPROJECT,
        info: *mut FMOD_EVENT_PROJECTINFO,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_GetGroup(
        eventproject: *mut FMOD_EVENTPROJECT,
        name: *const ::std::os::raw::c_char,
        cacheevents: FMOD_BOOL,
        group: *mut *mut FMOD_EVENTGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_GetGroupByIndex(
        eventproject: *mut FMOD_EVENTPROJECT,
        index: ::std::os::raw::c_int,
        cacheevents: FMOD_BOOL,
        group: *mut *mut FMOD_EVENTGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_GetNumGroups(
        eventproject: *mut FMOD_EVENTPROJECT,
        numgroups: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_GetEvent(
        eventproject: *mut FMOD_EVENTPROJECT,
        name: *const ::std::os::raw::c_char,
        mode: FMOD_EVENT_MODE,
        event: *mut *mut FMOD_EVENT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_GetEventByProjectID(
        eventproject: *mut FMOD_EVENTPROJECT,
        projectid: ::std::os::raw::c_uint,
        mode: FMOD_EVENT_MODE,
        event: *mut *mut FMOD_EVENT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_GetNumEvents(
        eventproject: *mut FMOD_EVENTPROJECT,
        numevents: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_LoadSampleData(
        eventproject: *mut FMOD_EVENTPROJECT,
        eventid_array: *mut ::std::os::raw::c_int,
        sizeof_eventid_array: ::std::os::raw::c_int,
        groupname_array: *mut *mut ::std::os::raw::c_char,
        sizeof_groupname_array: ::std::os::raw::c_int,
        eventmode: FMOD_EVENT_MODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_StopAllEvents(
        eventproject: *mut FMOD_EVENTPROJECT,
        immediate: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_CancelAllLoads(eventproject: *mut FMOD_EVENTPROJECT) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_SetUserData(
        eventproject: *mut FMOD_EVENTPROJECT,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_GetUserData(
        eventproject: *mut FMOD_EVENTPROJECT,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventProject_GetMemoryInfo(
        eventproject: *mut FMOD_EVENTPROJECT,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetInfo(
        eventgroup: *mut FMOD_EVENTGROUP,
        index: *mut ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_LoadEventData(
        eventgroup: *mut FMOD_EVENTGROUP,
        resource: FMOD_EVENT_RESOURCE,
        mode: FMOD_EVENT_MODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_FreeEventData(
        eventgroup: *mut FMOD_EVENTGROUP,
        event: *mut FMOD_EVENT,
        waituntilready: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetGroup(
        eventgroup: *mut FMOD_EVENTGROUP,
        name: *const ::std::os::raw::c_char,
        cacheevents: FMOD_BOOL,
        group: *mut *mut FMOD_EVENTGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetGroupByIndex(
        eventgroup: *mut FMOD_EVENTGROUP,
        index: ::std::os::raw::c_int,
        cacheevents: FMOD_BOOL,
        group: *mut *mut FMOD_EVENTGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetParentGroup(
        eventgroup: *mut FMOD_EVENTGROUP,
        group: *mut *mut FMOD_EVENTGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetParentProject(
        eventgroup: *mut FMOD_EVENTGROUP,
        project: *mut *mut FMOD_EVENTPROJECT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetNumGroups(
        eventgroup: *mut FMOD_EVENTGROUP,
        numgroups: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetEvent(
        eventgroup: *mut FMOD_EVENTGROUP,
        name: *const ::std::os::raw::c_char,
        mode: FMOD_EVENT_MODE,
        event: *mut *mut FMOD_EVENT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetEventByIndex(
        eventgroup: *mut FMOD_EVENTGROUP,
        index: ::std::os::raw::c_int,
        mode: FMOD_EVENT_MODE,
        event: *mut *mut FMOD_EVENT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetNumEvents(
        eventgroup: *mut FMOD_EVENTGROUP,
        numevents: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetProperty(
        eventgroup: *mut FMOD_EVENTGROUP,
        propertyname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetPropertyByIndex(
        eventgroup: *mut FMOD_EVENTGROUP,
        propertyindex: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetNumProperties(
        eventgroup: *mut FMOD_EVENTGROUP,
        numproperties: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetState(
        eventgroup: *mut FMOD_EVENTGROUP,
        state: *mut FMOD_EVENT_STATE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_SetUserData(
        eventgroup: *mut FMOD_EVENTGROUP,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetUserData(
        eventgroup: *mut FMOD_EVENTGROUP,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventGroup_GetMemoryInfo(
        eventgroup: *mut FMOD_EVENTGROUP,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetInfo(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        index: *mut ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetCategory(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        name: *const ::std::os::raw::c_char,
        category: *mut *mut FMOD_EVENTCATEGORY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetCategoryByIndex(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        index: ::std::os::raw::c_int,
        category: *mut *mut FMOD_EVENTCATEGORY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetNumCategories(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        numcategories: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetEventByIndex(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        index: ::std::os::raw::c_int,
        mode: FMOD_EVENT_MODE,
        event: *mut *mut FMOD_EVENT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetNumEvents(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        numevents: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetParentCategory(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        category: *mut *mut FMOD_EVENTCATEGORY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_StopAllEvents(eventcategory: *mut FMOD_EVENTCATEGORY) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_SetVolume(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetVolume(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        volume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_SetPitch(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        pitch: f32,
        units: FMOD_EVENT_PITCHUNITS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetPitch(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        pitch: *mut f32,
        units: FMOD_EVENT_PITCHUNITS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_SetPaused(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        paused: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetPaused(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        paused: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_SetMute(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        mute: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetMute(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        mute: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetChannelGroup(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        channelgroup: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_SetUserData(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetUserData(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventCategory_GetMemoryInfo(
        eventcategory: *mut FMOD_EVENTCATEGORY,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_Release(
        event: *mut FMOD_EVENT,
        freeeventdata: FMOD_BOOL,
        waituntilready: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_Start(event: *mut FMOD_EVENT) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_Stop(event: *mut FMOD_EVENT, immediate: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetInfo(
        event: *mut FMOD_EVENT,
        index: *mut ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
        info: *mut FMOD_EVENT_INFO,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetState(event: *mut FMOD_EVENT, state: *mut FMOD_EVENT_STATE)
        -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetParentGroup(
        event: *mut FMOD_EVENT,
        group: *mut *mut FMOD_EVENTGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetChannelGroup(
        event: *mut FMOD_EVENT,
        channelgroup: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_SetCallback(
        event: *mut FMOD_EVENT,
        callback: FMOD_EVENT_CALLBACK,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetParameter(
        event: *mut FMOD_EVENT,
        name: *const ::std::os::raw::c_char,
        parameter: *mut *mut FMOD_EVENTPARAMETER,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetParameterByIndex(
        event: *mut FMOD_EVENT,
        index: ::std::os::raw::c_int,
        parameter: *mut *mut FMOD_EVENTPARAMETER,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetNumParameters(
        event: *mut FMOD_EVENT,
        numparameters: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetProperty(
        event: *mut FMOD_EVENT,
        propertyname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        this_instance: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetPropertyByIndex(
        event: *mut FMOD_EVENT,
        propertyindex: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
        this_instance: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_SetProperty(
        event: *mut FMOD_EVENT,
        propertyname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        this_instance: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_SetPropertyByIndex(
        event: *mut FMOD_EVENT,
        propertyindex: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
        this_instance: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetNumProperties(
        event: *mut FMOD_EVENT,
        numproperties: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetPropertyInfo(
        event: *mut FMOD_EVENT,
        propertyindex: *mut ::std::os::raw::c_int,
        propertyname: *mut *mut ::std::os::raw::c_char,
        type_: *mut FMOD_EVENTPROPERTY_TYPE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetCategory(
        event: *mut FMOD_EVENT,
        category: *mut *mut FMOD_EVENTCATEGORY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_SetVolume(event: *mut FMOD_EVENT, volume: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetVolume(event: *mut FMOD_EVENT, volume: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_SetPitch(
        event: *mut FMOD_EVENT,
        pitch: f32,
        units: FMOD_EVENT_PITCHUNITS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetPitch(
        event: *mut FMOD_EVENT,
        pitch: *mut f32,
        units: FMOD_EVENT_PITCHUNITS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_SetPaused(event: *mut FMOD_EVENT, paused: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetPaused(event: *mut FMOD_EVENT, paused: *mut FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_SetMute(event: *mut FMOD_EVENT, mute: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetMute(event: *mut FMOD_EVENT, mute: *mut FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_Set3DAttributes(
        event: *mut FMOD_EVENT,
        position: *const FMOD_VECTOR,
        velocity: *const FMOD_VECTOR,
        orientation: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_Get3DAttributes(
        event: *mut FMOD_EVENT,
        position: *mut FMOD_VECTOR,
        velocity: *mut FMOD_VECTOR,
        orientation: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_Set3DOcclusion(
        event: *mut FMOD_EVENT,
        directocclusion: f32,
        reverbocclusion: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_Get3DOcclusion(
        event: *mut FMOD_EVENT,
        directocclusion: *mut f32,
        reverbocclusion: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_SetReverbProperties(
        event: *mut FMOD_EVENT,
        props: *const FMOD_REVERB_CHANNELPROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetReverbProperties(
        event: *mut FMOD_EVENT,
        props: *mut FMOD_REVERB_CHANNELPROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_SetUserData(
        event: *mut FMOD_EVENT,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetUserData(
        event: *mut FMOD_EVENT,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Event_GetMemoryInfo(
        event: *mut FMOD_EVENT,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_GetInfo(
        eventparameter: *mut FMOD_EVENTPARAMETER,
        index: *mut ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_GetRange(
        eventparameter: *mut FMOD_EVENTPARAMETER,
        rangemin: *mut f32,
        rangemax: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_SetValue(
        eventparameter: *mut FMOD_EVENTPARAMETER,
        value: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_GetValue(
        eventparameter: *mut FMOD_EVENTPARAMETER,
        value: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_SetVelocity(
        eventparameter: *mut FMOD_EVENTPARAMETER,
        value: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_GetVelocity(
        eventparameter: *mut FMOD_EVENTPARAMETER,
        value: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_SetSeekSpeed(
        eventparameter: *mut FMOD_EVENTPARAMETER,
        value: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_GetSeekSpeed(
        eventparameter: *mut FMOD_EVENTPARAMETER,
        value: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_SetUserData(
        eventparameter: *mut FMOD_EVENTPARAMETER,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_GetUserData(
        eventparameter: *mut FMOD_EVENTPARAMETER,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_KeyOff(eventparameter: *mut FMOD_EVENTPARAMETER) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_DisableAutomation(
        eventparameter: *mut FMOD_EVENTPARAMETER,
        disable: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventParameter_GetMemoryInfo(
        eventparameter: *mut FMOD_EVENTPARAMETER,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventReverb_Release(eventreverb: *mut FMOD_EVENTREVERB) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventReverb_Set3DAttributes(
        eventreverb: *mut FMOD_EVENTREVERB,
        position: *const FMOD_VECTOR,
        mindistance: f32,
        maxdistance: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventReverb_Get3DAttributes(
        eventreverb: *mut FMOD_EVENTREVERB,
        position: *mut FMOD_VECTOR,
        mindistance: *mut f32,
        maxdistance: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventReverb_SetProperties(
        eventreverb: *mut FMOD_EVENTREVERB,
        props: *const FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventReverb_GetProperties(
        eventreverb: *mut FMOD_EVENTREVERB,
        props: *mut FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventReverb_SetActive(
        eventreverb: *mut FMOD_EVENTREVERB,
        active: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventReverb_GetActive(
        eventreverb: *mut FMOD_EVENTREVERB,
        active: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventReverb_SetUserData(
        eventreverb: *mut FMOD_EVENTREVERB,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventReverb_GetUserData(
        eventreverb: *mut FMOD_EVENTREVERB,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventReverb_GetMemoryInfo(
        eventreverb: *mut FMOD_EVENTREVERB,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_Release(eventqueue: *mut FMOD_EVENTQUEUE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_Add(
        eventqueue: *mut FMOD_EVENTQUEUE,
        entry: *mut FMOD_EVENTQUEUEENTRY,
        allow_duplicates: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_Remove(
        eventqueue: *mut FMOD_EVENTQUEUE,
        entry: *mut FMOD_EVENTQUEUEENTRY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_RemoveHead(eventqueue: *mut FMOD_EVENTQUEUE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_Clear(
        eventqueue: *mut FMOD_EVENTQUEUE,
        stopallevents: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_FindFirstEntry(
        eventqueue: *mut FMOD_EVENTQUEUE,
        entry: *mut *mut FMOD_EVENTQUEUEENTRY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_FindNextEntry(
        eventqueue: *mut FMOD_EVENTQUEUE,
        entry: *mut *mut FMOD_EVENTQUEUEENTRY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_SetPaused(
        eventqueue: *mut FMOD_EVENTQUEUE,
        paused: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_GetPaused(
        eventqueue: *mut FMOD_EVENTQUEUE,
        paused: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_IncludeDuckingCategory(
        eventqueue: *mut FMOD_EVENTQUEUE,
        category: *mut FMOD_EVENTCATEGORY,
        ducked_volume: f32,
        unducked_volume: f32,
        duck_time: ::std::os::raw::c_uint,
        unduck_time: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_ExcludeDuckingCategory(
        eventqueue: *mut FMOD_EVENTQUEUE,
        category: *mut FMOD_EVENTCATEGORY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_SetCallback(
        eventqueue: *mut FMOD_EVENTQUEUE,
        callback: FMOD_EVENTQUEUE_CALLBACK,
        callbackuserdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_SetUserData(
        eventqueue: *mut FMOD_EVENTQUEUE,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_GetUserData(
        eventqueue: *mut FMOD_EVENTQUEUE,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_Dump(eventqueue: *mut FMOD_EVENTQUEUE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueue_GetMemoryInfo(
        eventqueue: *mut FMOD_EVENTQUEUE,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_Release(eventqueueentry: *mut FMOD_EVENTQUEUEENTRY) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_GetInfoOnlyEvent(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        infoonlyevent: *mut *mut FMOD_EVENT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_GetRealEvent(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        realevent: *mut *mut FMOD_EVENT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_SetPriority(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        priority: ::std::os::raw::c_uchar,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_GetPriority(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        priority: *mut ::std::os::raw::c_uchar,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_SetExpiryTime(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        expirytime: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_GetExpiryTime(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        expirytime: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_SetDelayTime(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        delay: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_GetDelayTime(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        delay: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_SetInterrupt(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        interrupt: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_GetInterrupt(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        interrupt: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_SetCrossfadeTime(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        crossfade: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_GetCrossfadeTime(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        crossfade: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_SetUserData(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_GetUserData(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_EventQueueEntry_GetMemoryInfo(
        eventqueueentry: *mut FMOD_EVENTQUEUEENTRY,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_Reset(musicsystem: *mut FMOD_MUSICSYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_SetVolume(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_GetVolume(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        volume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_SetReverbProperties(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        props: *const FMOD_REVERB_CHANNELPROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_GetReverbProperties(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        props: *mut FMOD_REVERB_CHANNELPROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_SetPaused(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        paused: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_GetPaused(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        paused: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_SetMute(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        mute: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_GetMute(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        mute: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_GetInfo(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        info: *mut FMOD_MUSIC_INFO,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_PromptCue(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        id: FMOD_MUSIC_CUE_ID,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_PrepareCue(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        id: FMOD_MUSIC_CUE_ID,
        prompt: *mut *mut FMOD_MUSICPROMPT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_GetParameterValue(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        id: FMOD_MUSIC_PARAM_ID,
        parameter: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_SetParameterValue(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        id: FMOD_MUSIC_PARAM_ID,
        parameter: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_GetCues(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        it: *mut FMOD_MUSIC_ITERATOR,
        filter: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_GetNextCue(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        it: *mut FMOD_MUSIC_ITERATOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_GetParameters(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        it: *mut FMOD_MUSIC_ITERATOR,
        filter: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_GetNextParameter(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        it: *mut FMOD_MUSIC_ITERATOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_LoadSoundData(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        resource: FMOD_EVENT_RESOURCE,
        mode: FMOD_EVENT_MODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_FreeSoundData(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        waituntilready: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_SetCallback(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        callback: FMOD_MUSIC_CALLBACK,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicSystem_GetMemoryInfo(
        musicsystem: *mut FMOD_MUSICSYSTEM,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicPrompt_Release(musicprompt: *mut FMOD_MUSICPROMPT) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicPrompt_Begin(musicprompt: *mut FMOD_MUSICPROMPT) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicPrompt_End(musicprompt: *mut FMOD_MUSICPROMPT) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicPrompt_IsActive(
        musicprompt: *mut FMOD_MUSICPROMPT,
        active: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_MusicPrompt_GetMemoryInfo(
        musicprompt: *mut FMOD_MUSICPROMPT,
        memorybits: ::std::os::raw::c_uint,
        event_memorybits: ::std::os::raw::c_uint,
        memoryused: *mut ::std::os::raw::c_uint,
        memoryused_details: *mut FMOD_MEMORY_USAGE_DETAILS,
    ) -> FMOD_RESULT;
}
